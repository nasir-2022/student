var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/entities/Address.html",[0,1.716,1,1.193]],["body/entities/Address.html",[0,1.463,1,2.151,2,1.91,3,0.209,4,0.182,5,0.182,6,2.424,7,0.182,8,3.048,9,4.108,10,3.048,11,3.128,12,1.531,13,0.36,14,1.674,15,4.423,16,4.423,17,3.469,18,3.469,19,1.359,20,3.469,21,3.469,22,3.469,23,4.423,24,1.415,25,2.734,26,1.112,27,0.027,28,1.529,29,2.41,30,4.963,31,1.292,32,2.87,33,2.87,34,2.87,35,3.469,36,2.043,37,2.87,38,3.469,39,3.56,40,2.87,41,4.108,42,4.108,43,4.108,44,2.87,45,4.108,46,3.469,47,2.87,48,3.469,49,3.469,50,2.87,51,2.483,52,3.469,53,2.87,54,2.424,55,2.87,56,2.87,57,4.108,58,2.899,59,2.274,60,2.655,61,2.87,62,3.469,63,0.339,64,1.589,65,2.87,66,1.463,67,0.209,68,0.296,69,0.296,70,0.36,71,0.209,72,0.05,73,2.87,74,2.87,75,2.87,76,2.87,77,2.87,78,2.87,79,2.87,80,2.87,81,2.87,82,2.87,83,2.424,84,2.87,85,2.13,86,2.13,87,1.91,88,2.13,89,2.13,90,2.424,91,2.87,92,1.735,93,1.735,94,2.87,95,0.016,96,0.016]],["title/controllers/AddressController.html",[97,1.474,98,2.24]],["body/controllers/AddressController.html",[1,2.416,3,0.141,4,0.123,5,0.123,7,0.421,12,1.524,13,0.243,19,2.202,25,3.461,26,0.944,27,0.027,28,0.954,29,1.887,31,1.012,36,1.342,51,1.173,63,0.355,67,0.141,68,0.2,69,0.2,70,0.243,71,0.141,72,0.034,95,0.012,96,0.012,97,0.85,98,2.036,99,0.85,100,1.639,101,1.44,102,3.06,103,1.084,104,3.63,105,3.63,106,3.63,107,3.63,108,3.63,109,3.63,110,1.639,111,3.818,112,1.44,113,3.778,114,3.003,115,1.941,116,3.189,117,3.557,118,4.43,119,3.687,120,1.941,121,1.941,122,1.887,123,1.76,124,2.142,125,1.948,126,2.748,127,2.235,128,1.948,129,1.639,130,3.189,131,3.189,132,2.75,133,3.189,134,1.941,135,1.941,136,2.584,137,3.142,138,1.941,139,1.941,140,1.639,141,1.941,142,1.941,143,2.584,144,1.44,145,2.584,146,3.06,147,1.941,148,1.941,149,1.639,150,2.75,151,1.941,152,1.941,153,2.27,154,1.44,155,1.074,156,1.835,157,1.44,158,0.395,159,2.27,160,2.27,161,3.859,162,3.47,163,3.687,164,3.47,165,1.44,166,0.916,167,2.379,168,1.639,169,1.639,170,1.941,171,1.941,172,1.074,173,0.34,174,0.85,175,1.44,176,3.307,177,1.941,178,1.941,179,1.644,180,1.941,181,3.47,182,1.941,183,1.941,184,2.86,185,1.941,186,1.941,187,1.941,188,1.941,189,1.941,190,1.941,191,1.941,192,1.941,193,1.941,194,1.941,195,1.941]],["title/classes/AddressDto.html",[72,0.059,111,2.034]],["body/classes/AddressDto.html",[1,2.207,3,0.117,4,0.101,5,0.101,7,0.101,11,3.089,12,1.608,13,0.201,14,1.069,15,4.805,16,4.805,17,2.813,18,2.813,19,1.405,20,2.813,21,2.813,22,2.813,23,4.805,24,1.099,25,3.645,26,0.96,27,0.027,28,1.569,29,1.974,31,1.115,35,4.517,36,2.221,38,4.242,48,4.517,49,4.517,51,3.232,52,4.517,58,2.131,59,1.453,60,1.453,62,2.216,63,0.275,64,0.888,67,0.117,68,0.166,69,0.166,70,0.201,71,0.117,72,0.046,92,1.586,95,0.01,96,0.01,111,2.327,166,0.756,196,0.653,197,1.354,198,3.46,199,3.572,200,1.354,201,2.963,202,6.303,203,4.486,204,4.721,205,1.604,206,4.397,207,2.625,208,4.148,209,1.604,210,4.397,211,4.397,212,4.397,213,5.004,214,3.586,215,3.151,216,3.559,217,1.604,218,1.604,219,2.625,220,3.251,221,4.242,222,1.604,223,1.354,224,2.625,225,1.604,226,1.604,227,5.023,228,1.604,229,3.251,230,2.216,231,1.604,232,1.604,233,1.604,234,1.604,235,1.604,236,1.604,237,3.559,238,3.559,239,2.216,240,3.727,241,1.19,242,1.19,243,0.888,244,3.858,245,3.586,246,3.383,247,3.151,248,1.947,249,2.625,250,1.354,251,1.604,252,1.604]],["title/modules/AddressModule.html",[253,1.588,254,2.034]],["body/modules/AddressModule.html",[1,2.19,3,0.314,4,0.273,5,0.273,7,0.273,24,0.944,27,0.027,63,0.55,64,2.388,67,0.314,68,0.445,69,0.445,70,0.541,71,0.314,72,0.075,95,0.021,96,0.021,98,3.595,99,1.889,158,0.878,167,3.523,168,3.643,253,3.002,254,3.924,255,2.2,256,2.754,257,3.643,258,3.643,259,3.264,260,2.607,261,2.607,262,4.314,263,2.871,264,2.871,265,2.607,266,2.035,267,3.643,268,4.314,269,3.643,270,2.388,271,3.643,272,4.314,273,3.201,274,4.314,275,4.314]],["title/classes/AddressRepository.html",[72,0.059,270,1.863]],["body/classes/AddressRepository.html",[1,2.216,3,0.359,4,0.312,5,0.312,7,0.312,27,0.026,63,0.484,66,2.514,67,0.359,68,0.509,69,0.509,70,0.618,71,0.359,72,0.086,95,0.022,96,0.022,196,2.009,269,4.164,270,3.244,276,4.164,277,3.994,278,2.988,279,3.659,280,4.932]],["title/injectables/AddressService.html",[167,1.863,173,0.59]],["body/injectables/AddressService.html",[1,2.306,3,0.154,4,0.134,5,0.134,7,0.34,12,1.366,13,0.265,19,1.989,25,2.997,26,0.941,27,0.027,28,1.514,31,1.093,36,1.418,63,0.33,67,0.154,68,0.218,69,0.218,70,0.265,71,0.154,72,0.037,95,0.013,96,0.013,103,1.159,104,3.803,105,2.763,106,3.803,107,2.763,108,3.803,109,3.803,110,2.763,111,3.793,116,2.428,117,2.85,122,2.039,123,1.903,124,2.182,125,1.989,126,2.829,127,2.283,128,1.989,129,2.763,132,2.493,136,2.763,137,1.811,140,2.763,143,2.763,149,2.763,150,1.811,156,1.836,158,0.431,167,1.811,169,1.786,172,1.811,173,0.789,174,0.926,179,1.704,201,2.633,270,2.493,271,1.786,281,0.998,282,1.786,283,2.763,284,2.428,285,2.428,286,4.238,287,1.171,288,2.115,289,2.115,290,3.272,291,2.763,292,4.002,293,2.115,294,2.115,295,3.272,296,2.177,297,2.115,298,2.115,299,1.977,300,2.115,301,2.115,302,1.408,303,1.569,304,3.427,305,2.697,306,3.427,307,2.115,308,3.79,309,4.001,310,3.328,311,3.821,312,3.112,313,3.427,314,3.821,315,3.272,316,2.115,317,2.115,318,2.115,319,1.569,320,1.569]],["title/controllers/AppController.html",[97,1.474,321,2.24]],["body/controllers/AppController.html",[3,0.322,4,0.28,5,0.28,7,0.28,13,0.555,27,0.027,28,1.381,29,1.679,31,0.9,63,0.453,67,0.322,68,0.457,69,0.457,70,0.555,71,0.322,72,0.077,95,0.021,96,0.021,97,2.73,99,1.937,103,1.944,125,1.815,127,2.083,128,1.815,156,1.463,158,0.9,172,2.448,173,0.775,174,1.937,179,1.463,321,3.651,322,3.735,323,4.15,324,5.487,325,5.266,326,4.423,327,4.633,328,4.071,329,3.451,330,3.735,331,4.423,332,4.423]],["title/modules/AppModule.html",[253,1.588,333,2.24]],["body/modules/AppModule.html",[1,1.463,3,0.3,4,0.261,5,0.261,7,0.261,27,0.027,63,0.539,67,0.3,68,0.426,69,0.426,70,0.518,71,0.3,72,0.072,95,0.02,96,0.02,99,2.301,158,0.841,253,2.963,254,3.796,255,2.105,256,2.679,259,3.176,260,2.495,261,2.495,263,3.497,264,2.748,265,2.495,321,3.846,323,3.497,329,3.554,330,3.487,333,4.524,334,3.487,335,3.487,336,3.487,337,3.796,338,3.796,339,4.13,340,4.437,341,4.13,342,4.13,343,4.13,344,4.13,345,4.13]],["title/injectables/AppService.html",[173,0.59,329,1.863]],["body/injectables/AppService.html",[3,0.337,4,0.293,5,0.293,7,0.293,13,0.581,27,0.027,28,1.422,31,0.944,63,0.383,67,0.337,68,0.479,69,0.479,70,0.581,71,0.337,72,0.081,95,0.022,96,0.022,103,2.001,125,1.868,127,2.144,128,1.868,158,0.944,172,3.125,173,1.111,179,1.533,281,2.187,323,3.758,325,5.353,327,4.769,328,4.19,329,3.125,346,3.914,347,4.636,348,4.636,349,4.636]],["title/entities/Course.html",[0,1.716,350,1.278]],["body/entities/Course.html",[0,2.287,2,2.164,3,0.237,4,0.206,5,0.206,7,0.206,8,3.328,11,3.134,12,1.54,13,0.408,14,1.827,19,1.921,24,1.435,26,1.078,27,0.027,28,1.578,29,2.335,30,4.824,31,1.252,36,1.961,39,3.809,58,2.482,59,2.482,60,2.482,63,0.37,64,1.8,66,1.658,67,0.237,68,0.336,69,0.336,71,0.237,72,0.057,85,2.413,86,2.413,87,2.164,88,2.413,89,2.413,92,3.103,93,1.966,95,0.017,96,0.017,350,2.522,351,2.747,352,2.985,353,4.486,354,4.335,355,4.335,356,4.335,357,4.335,358,3.416,359,3.253,360,3.788,361,3.253,362,3.788,363,3.253,364,3.328,365,3.253,366,4.486,367,3.253,368,4.486,369,4.486,370,3.253,371,4.486,372,3.253,373,4.486,374,3.253,375,4.486,376,4.486,377,2.747]],["title/controllers/CourseController.html",[97,1.474,378,2.24]],["body/controllers/CourseController.html",[3,0.143,4,0.124,5,0.124,7,0.422,12,1.538,13,0.246,19,2.246,26,0.948,27,0.027,28,0.778,29,1.896,31,1.017,36,1.851,51,1.187,63,0.357,67,0.143,68,0.203,69,0.203,70,0.246,71,0.143,72,0.034,95,0.012,96,0.012,97,1.671,99,0.86,101,1.458,103,1.094,112,1.458,113,3.792,114,3.018,117,2.995,118,4.436,119,3.706,122,1.896,123,1.769,124,2.148,125,1.954,126,2.206,127,2.163,128,1.954,130,3.211,131,3.211,132,2.764,133,3.211,137,3.425,144,1.458,150,2.764,153,1.458,154,2.832,155,1.087,156,1.842,157,1.458,158,0.4,159,2.292,160,2.292,161,3.877,162,3.491,163,3.706,164,3.491,165,1.458,166,0.927,173,0.344,174,0.86,175,1.458,176,3.324,179,1.652,181,3.491,184,2.88,299,2.615,350,2.598,358,3.324,378,2.055,379,1.659,380,3.654,381,2.608,382,3.654,383,2.608,384,2.608,385,2.608,386,1.659,387,3.443,388,1.965,389,4.327,390,1.965,391,1.965,392,1.659,393,1.965,394,1.965,395,1.659,396,1.965,397,1.965,398,1.659,399,1.965,400,1.965,401,3.089,402,1.659,403,1.965,404,1.965,405,1.659,406,1.965,407,1.965,408,2.292,409,2.113,410,1.659,411,1.659,412,1.965,413,1.965,414,1.965,415,1.965,416,1.965,417,1.965,418,1.965,419,1.965,420,1.965,421,1.965,422,1.965,423,1.965,424,1.965,425,1.965,426,1.965,427,1.965,428,1.965,429,1.965,430,1.965,431,1.965,432,1.965,433,1.965]],["title/classes/CourseDto.html",[72,0.059,387,2.034]],["body/classes/CourseDto.html",[3,0.166,4,0.144,5,0.144,7,0.144,11,3.102,12,1.6,13,0.286,14,1.413,19,1.668,24,1.244,26,0.967,27,0.027,28,1.495,29,1.914,31,1.123,36,1.661,58,1.92,59,1.92,60,1.92,63,0.347,64,1.263,67,0.166,68,0.236,69,0.236,70,0.286,71,0.166,72,0.06,95,0.013,96,0.013,166,1.077,196,0.93,198,3.355,199,3.113,200,2.93,201,2.901,203,4.218,206,4.218,208,3.939,211,2.574,212,4.541,213,5.168,215,2.574,216,3.119,221,4.483,223,1.928,237,3.532,238,3.532,240,3.478,241,1.694,242,1.694,243,1.263,244,3.74,246,3.478,247,2.574,248,1.694,250,2.93,350,2.602,354,3.544,355,4.257,356,3.544,357,3.544,358,4.121,360,4.801,362,4.483,364,4.218,387,2.833,434,1.928,435,2.283,436,3.469,437,2.283,438,5.938,439,2.375,440,2.283,441,2.93,442,2.283,443,3.469,444,2.283,445,5.309,446,2.283,447,3.469,448,4.687,449,2.283,450,2.93,451,2.283,452,2.283,453,2.283,454,2.309,455,2.283,456,2.283,457,2.283]],["title/modules/CourseModule.html",[253,1.588,337,2.034]],["body/modules/CourseModule.html",[3,0.313,4,0.272,5,0.272,7,0.272,24,0.942,27,0.027,63,0.55,64,2.382,67,0.313,68,0.444,69,0.444,70,0.54,71,0.313,72,0.075,95,0.021,96,0.021,99,1.885,158,0.876,253,3,255,2.195,256,2.75,259,3.26,260,2.601,261,2.601,263,2.864,264,2.864,265,2.601,266,2.031,267,3.635,273,3.194,337,3.922,350,2.048,378,3.59,409,3.52,410,3.635,458,3.635,459,3.635,460,4.305,461,4.555,462,4.305,463,3.635,464,2.382,465,3.635,466,4.305,467,4.305,468,4.305]],["title/classes/CourseRepository.html",[72,0.059,464,1.863]],["body/classes/CourseRepository.html",[3,0.359,4,0.312,5,0.312,7,0.312,27,0.026,63,0.484,66,2.514,67,0.359,68,0.509,69,0.509,70,0.618,71,0.359,72,0.086,95,0.022,96,0.022,196,2.009,277,3.994,278,2.988,279,3.659,350,2.375,463,4.164,464,3.244,469,4.164,470,4.932]],["title/injectables/CourseService.html",[173,0.59,409,1.863]],["body/injectables/CourseService.html",[3,0.153,4,0.133,5,0.133,7,0.339,12,1.363,13,0.263,19,2.104,26,0.938,27,0.027,28,1.511,31,1.09,36,2.012,63,0.329,67,0.153,68,0.216,69,0.216,70,0.263,71,0.153,72,0.037,95,0.012,96,0.012,103,1.151,116,2.412,117,2.481,122,2.032,123,1.897,124,2.178,125,1.985,126,2.821,127,2.204,128,1.985,132,2.481,137,2.203,150,1.799,156,1.83,158,0.427,172,1.799,173,0.786,174,0.918,179,1.605,201,2.588,211,2.412,281,0.989,286,4.232,287,1.16,296,1.395,299,3.101,303,1.556,304,3.415,305,2.692,306,3.415,308,3.78,309,4.046,310,3.365,311,3.972,312,3.101,313,3.415,314,3.808,319,1.556,320,1.556,350,2.536,358,2.983,380,2.745,381,2.745,382,2.745,383,2.745,384,2.745,385,2.745,386,2.745,387,3.508,392,2.745,395,2.745,398,2.745,402,2.745,405,2.745,408,2.412,409,2.481,411,1.771,461,2.745,464,2.481,465,1.771,471,1.771,472,2.097,473,2.097,474,3.98,475,2.097,476,2.097,477,2.097,478,2.097,479,2.097,480,2.412,481,2.097,482,2.097,483,3.25,484,2.097,485,2.097,486,2.097]],["title/classes/CustomException.html",[72,0.059,487,2.498]],["body/classes/CustomException.html",[3,0.33,4,0.287,5,0.287,7,0.352,12,1.066,27,0.027,31,0.924,63,0.375,67,0.33,68,0.468,69,0.468,71,0.33,72,0.105,95,0.021,96,0.021,122,1.723,123,1.607,124,1.975,155,2.511,156,1.501,158,0.924,184,3.019,196,2.27,201,2.44,278,2.842,287,3.339,302,4.014,377,3.832,487,4.135,488,4.707,489,4.707,490,3.832,491,5.574,492,4.135,493,5.574,494,4.537,495,5.574,496,3.832,497,4.537]],["title/classes/ExceptionExceptionFilter.html",[72,0.059,498,2.498]],["body/classes/ExceptionExceptionFilter.html",[3,0.267,4,0.232,5,0.232,7,0.308,12,0.863,13,0.461,26,0.644,27,0.027,31,0.748,46,3.102,63,0.402,67,0.267,68,0.379,69,0.379,70,0.461,71,0.267,72,0.095,95,0.019,96,0.019,103,1.725,118,3.871,122,1.395,123,1.301,124,2.061,125,1.611,127,1.849,128,1.611,156,1.611,158,0.748,179,1.611,196,1.496,201,2.132,212,2.726,305,2.132,310,2.033,312,3.516,352,2.444,364,2.726,439,2.209,492,4.054,498,4.616,499,4.113,500,4.113,501,3.102,502,3.241,503,5.464,504,4.87,505,5.818,506,5.818,507,3.674,508,4.87,509,3.102,510,3.674,511,5.818,512,3.674,513,3.674,514,3.674,515,3.674,516,3.674,517,3.674,518,3.674,519,3.674,520,3.674,521,3.674,522,4.87,523,3.674,524,3.614,525,3.674,526,4.87,527,3.674,528,4.87,529,3.674]],["title/injectables/JwtAuthGuard.html",[173,0.59,530,2.498]],["body/injectables/JwtAuthGuard.html",[3,0.362,4,0.314,5,0.314,7,0.314,27,0.027,63,0.486,67,0.362,68,0.513,69,0.513,70,0.623,71,0.362,72,0.087,95,0.023,96,0.023,158,1.012,173,1.032,278,2.534,281,2.344,530,4.814,531,4.197,532,4.197,533,4.97,534,3.307,535,4.97]],["title/interfaces/JwtPayload.html",[536,1.588,537,2.034]],["body/interfaces/JwtPayload.html",[3,0.364,4,0.317,5,0.317,7,0.317,13,0.628,14,2.41,26,0.878,27,0.026,28,1.585,71,0.364,95,0.023,96,0.023,536,2.79,537,3.804,538,3.333,539,4.229,540,4.229,541,3.931,542,4.389]],["title/injectables/JwtStrategy.html",[173,0.59,543,2.034]],["body/injectables/JwtStrategy.html",[3,0.273,4,0.237,5,0.237,7,0.312,12,1.16,13,0.471,24,1.284,26,0.865,27,0.027,31,1.005,63,0.503,67,0.273,71,0.273,72,0.102,95,0.019,96,0.019,103,1.75,122,1.875,123,1.75,124,1.75,125,1.634,127,1.875,128,1.634,155,2.077,156,1.634,158,0.764,173,1.028,174,1.643,179,1.241,210,4.353,266,2.767,278,1.913,281,1.77,286,3.674,287,2.077,291,4.171,296,2.497,302,2.497,304,2.497,305,2.162,306,2.497,309,2.497,310,2.077,312,2.267,313,2.497,496,4.171,534,2.497,537,3.545,543,3.545,544,3.168,545,3.168,546,3.752,547,4.662,548,4.939,549,3.752,550,4.171,551,3.752,552,3.752,553,3.752,554,3.168,555,3.664,556,2.784,557,3.168,558,3.168,559,3.168,560,3.752,561,3.752,562,3.752,563,3.752,564,3.752,565,2.784,566,3.752,567,3.168,568,3.752,569,3.168,570,3.752]],["title/classes/LoginDto.html",[72,0.059,571,2.034]],["body/classes/LoginDto.html",[3,0.293,4,0.255,5,0.255,7,0.255,11,2.843,12,1.415,13,0.505,14,2.106,19,1.994,24,1.464,26,0.906,27,0.027,28,1.517,29,1.963,31,1.053,63,0.427,67,0.293,68,0.416,69,0.416,70,0.505,71,0.293,72,0.09,95,0.02,96,0.02,113,4.317,166,1.899,196,1.64,198,3.441,201,2.264,237,3.801,238,3.801,243,2.228,541,3.451,571,3.125,572,3.4,573,4.366,574,4.366,575,4.417,576,4.026,577,5.171,578,5.171,579,5.171,580,4.026,581,3.441,582,4.026,583,5.171,584,4.026]],["title/interfaces/Response.html",[305,1.474,536,1.588]],["body/interfaces/Response.html",[3,0.303,4,0.263,5,0.263,7,0.263,13,0.522,14,2.152,26,0.73,27,0.027,63,0.436,67,0.303,68,0.43,69,0.43,70,0.522,71,0.384,72,0.106,93,3.193,95,0.02,96,0.02,124,1.872,125,1.378,128,1.378,156,1.748,158,0.848,173,0.926,179,1.748,305,2.672,352,4.283,439,2.006,454,3.516,480,3.09,502,2.772,536,2.737,538,2.772,585,3.09,586,3.09,587,4.9,588,4.462,589,4.306,590,4.462,591,3.517,592,3.92,593,2.772,594,3.516,595,3.09,596,4.462,597,3.517,598,3.517,599,3.517]],["title/guards/RolesGuard.html",[600,2.498,601,2.24]],["body/guards/RolesGuard.html",[3,0.273,4,0.237,5,0.237,7,0.312,12,1.16,13,0.471,24,1.081,26,0.865,27,0.027,31,1.005,63,0.503,67,0.273,68,0.387,69,0.387,70,0.471,71,0.273,72,0.065,95,0.019,96,0.019,103,1.75,114,2.267,122,1.875,123,1.75,124,1.75,125,1.634,126,2.518,127,1.875,128,1.634,156,1.634,158,0.764,173,1.028,174,1.643,179,1.826,287,2.077,308,3.286,502,2.497,589,4.353,592,4.096,593,2.497,595,3.664,601,3.904,602,3.752,603,3.168,604,5.867,605,3.752,606,5.521,607,3.752,608,5.867,609,4.939,610,3.752,611,4.939,612,4.171,613,3.168,614,2.784,615,3.752,616,2.985,617,2.784,618,3.752,619,5.521,620,3.752,621,3.752,622,3.752,623,3.752,624,2.784,625,3.752,626,3.752]],["title/injectables/TransformInterceptor.html",[173,0.59,594,2.24]],["body/injectables/TransformInterceptor.html",[3,0.293,4,0.255,5,0.255,7,0.327,12,0.946,13,0.505,26,0.706,27,0.027,31,0.82,63,0.427,67,0.293,68,0.416,69,0.416,70,0.505,71,0.376,72,0.105,93,2.433,95,0.02,96,0.02,103,1.832,122,1.529,123,1.426,124,2.135,125,1.71,128,1.71,156,1.71,158,0.82,173,0.906,179,1.71,281,1.899,305,2.264,352,3.801,439,1.529,454,2.679,480,3.836,502,2.679,536,2.439,585,3.836,586,2.987,587,3.4,588,5.089,589,4.733,590,4.366,591,3.4,592,4.238,593,2.679,594,4.01,595,3.836,596,5.089,597,4.366,598,3.4,599,3.4,627,5.171,628,4.026]],["title/entities/User.html",[0,1.716,24,0.737]],["body/entities/User.html",[0,2.023,1,2.251,2,1.821,3,0.199,4,0.173,5,0.173,7,0.173,8,2.945,10,2.945,11,2.998,12,1.476,13,0.343,14,1.617,19,1.936,24,1.483,26,1.102,27,0.027,28,1.509,29,2.356,30,4.759,31,1.263,36,2.124,39,4.036,54,2.31,58,2.835,59,2.835,60,2.835,63,0.423,66,1.395,67,0.199,68,0.282,69,0.282,70,0.343,71,0.199,72,0.081,83,3.351,85,2.03,86,2.03,87,1.821,88,2.03,89,2.03,92,2.398,93,2.398,95,0.015,96,0.015,114,2.398,350,2.276,439,1.945,454,3.108,541,2.822,575,3.619,581,2.641,616,3.75,617,2.03,629,2.31,630,3.969,631,4.593,632,4.593,633,3.944,634,3.969,635,2.736,636,2.736,637,2.736,638,2.736,639,2.736,640,2.736,641,2.736,642,4.67,643,2.736,644,2.736,645,2.736,646,2.736,647,2.736,648,3.351,649,2.736,650,5.123,651,3.351,652,2.736,653,2.736,654,3.351,655,2.03,656,2.03,657,2.736,658,2.736,659,2.736,660,2.736,661,2.736,662,2.31]],["title/controllers/UserController.html",[97,1.474,663,2.24]],["body/controllers/UserController.html",[3,0.122,4,0.106,5,0.106,7,0.418,12,1.546,13,0.21,19,2.233,24,1.497,26,0.973,27,0.027,28,0.865,29,1.863,31,0.999,36,1.65,51,1.014,63,0.359,67,0.122,68,0.173,69,0.173,70,0.21,71,0.122,72,0.047,95,0.01,96,0.01,97,1.505,99,0.735,101,1.245,103,0.965,112,2.02,113,3.768,114,3.089,117,3.313,118,4.402,119,3.64,122,1.863,123,1.738,124,1.923,125,1.933,126,1.752,127,2.219,128,1.933,130,2.934,131,2.934,132,2.577,133,2.934,137,3.234,144,1.245,145,3.933,150,2.829,153,2.02,154,1.245,155,0.928,156,1.796,157,1.245,158,0.342,159,2.55,160,2.55,161,3.792,162,3.226,163,3.456,164,3.226,165,1.245,166,0.791,173,0.294,174,0.735,175,2.02,176,3.265,179,1.623,181,3.226,184,2.632,284,1.245,285,1.245,299,3.089,328,2.55,439,2.109,492,2.55,524,4.336,571,2.814,573,3.34,663,1.812,664,1.417,665,2.299,666,2.299,667,3.34,668,2.299,669,3.672,670,2.299,671,4.461,672,1.417,673,1.678,674,1.678,675,2.299,676,3.618,677,1.678,678,1.678,679,3.955,680,1.417,681,1.678,682,1.678,683,1.417,684,1.678,685,1.678,686,2.723,687,2.723,688,3.437,689,1.417,690,1.678,691,1.678,692,1.678,693,2.723,694,1.417,695,1.678,696,3.34,697,1.678,698,1.678,699,2.299,700,1.417,701,1.678,702,1.678,703,2.723,704,1.417,705,1.417,706,2.189,707,1.417,708,1.678,709,1.678,710,1.678,711,1.678,712,1.678,713,1.678,714,1.678,715,1.417,716,1.678,717,1.678,718,1.678,719,1.678,720,1.678,721,1.678,722,1.678,723,1.678,724,1.678,725,1.678,726,1.678,727,1.678,728,1.678,729,1.678,730,1.678,731,1.678,732,1.678,733,1.678,734,1.678]],["title/classes/UserDto.html",[72,0.059,676,2.034]],["body/classes/UserDto.html",[1,1.978,3,0.157,4,0.136,5,0.136,7,0.136,11,2.759,12,1.539,13,0.27,14,1.352,19,1.625,24,1.521,26,1.025,27,0.027,28,1.472,29,1.97,31,1.191,36,2.212,58,2.872,59,1.837,60,1.837,63,0.406,67,0.157,68,0.223,69,0.223,70,0.27,71,0.157,72,0.079,92,2.749,95,0.013,96,0.013,166,1.017,196,0.878,198,3.453,199,2.463,201,2.946,203,4.481,204,4.382,206,4.481,208,4.142,214,1.82,215,2.463,216,3.453,220,3.842,229,2.804,230,1.82,237,3.598,238,3.598,239,3.42,240,3.005,241,1.599,242,1.599,243,1.193,244,3.851,245,3.42,246,3.645,247,3.375,248,1.599,350,1.97,439,1.26,541,2.447,542,2.463,574,2.804,575,3.811,581,3.453,616,3.136,617,1.599,631,5.025,632,5.165,633,4.836,648,2.804,655,1.599,656,1.599,662,1.82,676,2.006,735,1.82,736,2.155,737,2.155,738,2.155,739,2.804,740,4.549,741,2.155,742,2.155,743,3.32,744,3.32,745,2.155,746,2.155,747,3.32,748,2.155,749,2.155,750,2.155,751,2.155,752,2.155,753,2.155,754,2.155,755,2.155,756,3.32,757,4.05,758,2.155,759,2.155,760,3.32,761,2.155,762,2.155,763,2.155,764,2.155]],["title/modules/UserModule.html",[253,1.588,338,2.034]],["body/modules/UserModule.html",[1,1.304,3,0.268,4,0.233,5,0.233,7,0.233,24,1.274,27,0.027,63,0.558,67,0.268,71,0.268,72,0.085,95,0.019,96,0.019,99,2.135,158,0.749,173,1.02,253,2.857,255,1.877,256,2.486,259,2.947,260,2.224,261,2.224,263,3.245,264,3.639,265,2.224,266,1.736,270,2.037,273,3.618,338,3.943,340,3.108,350,1.397,464,2.037,534,2.449,543,4.041,555,2.731,556,2.731,558,3.108,559,3.108,601,3.245,655,2.731,656,2.731,663,3.639,706,3.445,707,3.108,765,3.108,766,3.108,767,3.108,768,3.681,769,3.681,770,2.731,771,4.877,772,3.681,773,3.681,774,3.681,775,3.681,776,3.681,777,3.108,778,3.681,779,3.681,780,3.681,781,3.681,782,3.681,783,3.681,784,3.681,785,3.681,786,3.681,787,3.681]],["title/classes/UserRepository.html",[72,0.059,266,1.588]],["body/classes/UserRepository.html",[3,0.352,4,0.306,5,0.306,7,0.306,24,1.357,27,0.026,63,0.478,66,2.464,67,0.352,68,0.499,69,0.499,70,0.606,71,0.352,72,0.108,95,0.022,96,0.022,196,1.969,266,2.732,277,3.972,278,2.953,279,3.586,777,4.081,788,4.081,789,5.791,790,5.791,791,5.791,792,4.833]],["title/injectables/UserService.html",[173,0.59,706,1.863]],["body/injectables/UserService.html",[3,0.123,4,0.107,5,0.107,7,0.276,11,0.797,12,1.422,13,0.212,19,1.909,24,1.442,26,0.898,27,0.027,28,1.474,31,1.043,36,1.655,63,0.406,67,0.123,68,0.174,69,0.174,70,0.212,71,0.123,72,0.086,95,0.01,96,0.01,103,0.97,117,2.586,122,1.946,123,1.816,124,1.407,125,1.936,126,2.509,127,2.222,128,1.936,132,1.515,137,1.911,150,2.198,155,0.935,156,1.8,158,0.344,172,2.198,173,0.48,174,0.74,176,1.822,179,1.695,201,2.563,210,2.032,266,1.873,277,1.655,281,0.797,283,2.312,284,2.032,285,2.032,286,4.158,287,0.935,296,2.298,299,1.655,302,1.124,303,1.253,304,3.41,305,2.676,306,3.776,308,3.99,309,4.03,310,3.352,311,3.467,312,2.974,313,3.274,314,2.946,319,1.253,320,1.253,408,2.032,439,1.946,450,2.312,524,3.467,537,1.655,541,1.021,545,1.427,547,2.916,550,1.427,556,1.253,557,1.427,567,1.427,569,1.427,571,2.087,575,2.642,581,1.822,665,2.312,666,3.353,667,3.353,668,2.312,669,2.916,670,2.312,671,4.328,672,2.312,675,2.312,676,3.487,680,2.312,683,2.312,689,2.312,694,2.312,696,2.916,699,2.312,700,1.427,704,1.427,705,1.427,706,1.515,715,1.427,770,1.253,793,1.427,794,4.364,795,1.689,796,2.738,797,1.689,798,1.689,799,2.738,800,1.689,801,1.689,802,2.738,803,1.689,804,1.689,805,1.689,806,1.689,807,1.689,808,1.689,809,1.427,810,1.689,811,1.689,812,1.689,813,2.738,814,1.689,815,3.453,816,1.689,817,1.689,818,1.689,819,1.689,820,2.738,821,2.738,822,1.689,823,1.689,824,1.689,825,1.689,826,1.689,827,1.689,828,1.689,829,2.738,830,1.689,831,1.689,832,1.689,833,1.689,834,2.738,835,1.689,836,1.689,837,1.689,838,1.689,839,3.453,840,2.738,841,2.738,842,1.689,843,1.689,844,1.689,845,2.738,846,1.689,847,1.689,848,1.689,849,1.689,850,1.689]],["title/interfaces/ValidationPipeOptions.html",[536,1.588,851,2.498]],["body/interfaces/ValidationPipeOptions.html",[3,0.314,4,0.273,5,0.273,7,0.273,13,0.541,14,2.201,26,1.033,27,0.027,63,0.356,67,0.314,68,0.445,69,0.445,70,0.541,71,0.314,72,0.075,95,0.021,96,0.021,123,2.3,243,2.388,278,2.754,439,2.347,536,2.782,538,2.871,565,4.008,612,5.483,851,4.586,852,3.643,853,5.898,854,6.494,855,6.181,856,6.181,857,6.181,858,5.402,859,5.402,860,4.314]],["title/coverage.html",[861,3.407]],["body/coverage.html",[0,2.721,1,1.242,5,0.222,6,2.961,10,2.602,24,0.767,26,0.615,27,0.027,72,0.113,95,0.018,96,0.018,97,2.5,98,2.333,100,2.961,111,2.119,167,1.941,173,1.099,197,2.961,216,4.643,266,1.654,270,1.941,276,2.961,282,2.961,305,1.535,310,1.941,321,2.333,322,2.961,329,1.941,346,2.961,350,1.331,351,2.961,378,2.333,379,2.961,387,2.119,409,1.941,434,2.961,464,1.941,469,2.961,471,2.961,487,2.602,488,2.961,489,2.961,490,2.961,498,2.602,499,2.961,500,2.961,501,2.961,530,2.602,531,2.961,532,2.961,536,2.518,537,2.119,539,2.961,540,2.961,543,2.119,544,2.961,565,2.602,571,2.119,572,2.961,585,3.503,586,3.503,594,2.333,600,2.602,601,2.333,603,2.961,614,2.602,624,2.602,629,2.961,663,2.333,664,2.961,676,2.119,706,1.941,735,2.961,788,2.961,793,2.961,851,2.602,852,2.961,861,2.602,862,3.507,863,3.507,864,3.507,865,4.721,866,6.531,867,5.71,868,3.507,869,6.274,870,3.507,871,2.961,872,2.961,873,3.507,874,5.338,875,3.987,876,4.721,877,3.507,878,3.507]],["title/dependencies.html",[256,2.064,879,2.812]],["body/dependencies.html",[27,0.027,66,2.271,72,0.096,95,0.021,96,0.021,158,0.907,166,2.101,243,2.465,256,2.271,265,2.691,509,4.653,534,2.964,554,5.052,555,3.304,593,2.964,613,3.761,770,3.304,809,3.761,880,4.454,881,4.454,882,6.252,883,4.454,884,4.454,885,4.454,886,4.454,887,4.454,888,4.454,889,4.454,890,4.454,891,4.454,892,4.454,893,4.454,894,4.454,895,4.454,896,4.454,897,5.51,898,4.454,899,4.454,900,4.454,901,4.454,902,4.454,903,4.454,904,4.454,905,4.454,906,4.454,907,4.454,908,4.454,909,4.454,910,4.454,911,4.454,912,4.454,913,4.454]],["title/miscellaneous/enumerations.html",[914,1.556,915,3.418]],["body/miscellaneous/enumerations.html",[13,0.65,24,1.397,27,0.025,95,0.023,96,0.023,439,1.968,542,3.846,616,3.647,654,4.377,914,2.869,915,4.377,916,5.183,917,5.183,918,6.036,919,5.097]],["title/miscellaneous/functions.html",[914,1.556,920,3.418]],["body/miscellaneous/functions.html",[13,0.666,27,0.023,72,0.092,95,0.023,96,0.023,871,4.485,872,5.446,914,2.94,920,4.485,921,5.312,922,5.312]],["title/index.html",[13,0.353,923,2.812,924,2.812]],["body/index.html",[4,0.274,7,0.274,27,0.026,67,0.315,87,2.884,90,3.659,95,0.021,96,0.021,277,2.619,323,2.884,439,1.645,861,3.215,925,4.334,926,4.334,927,5.417,928,4.334,929,4.334,930,4.334,931,4.334,932,4.334,933,5.91,934,4.334,935,4.334,936,4.334,937,6.595,938,4.334,939,4.334,940,6.501,941,4.334,942,4.334,943,5.417,944,4.334,945,4.334,946,4.334,947,4.334,948,5.417,949,5.417,950,4.334,951,4.334,952,4.334,953,5.417,954,5.417,955,4.334,956,4.334,957,4.334,958,4.334,959,4.334,960,3.659,961,4.334,962,4.334,963,4.334,964,4.334,965,4.334,966,4.334,967,4.334,968,4.334,969,4.334,970,4.334,971,4.334,972,4.334,973,4.334,974,4.334,975,4.334]],["title/modules.html",[255,2.341]],["body/modules.html",[27,0.023,95,0.023,96,0.023,254,3.116,255,2.629,333,3.431,337,3.116,338,3.116,960,5.544,976,6.565,977,6.565,978,6.565]],["title/overview.html",[979,3.878]],["body/overview.html",[2,2.916,27,0.026,95,0.021,96,0.021,99,1.919,167,3.287,196,1.785,254,3.864,255,2.235,256,2.781,257,3.701,258,3.701,259,3.297,260,2.649,261,2.649,281,2.067,329,3.287,333,4.514,334,3.701,335,3.701,336,3.701,337,3.864,338,4.038,409,3.287,441,4.607,458,3.701,459,3.701,538,2.916,543,3.995,600,3.252,706,3.287,739,4.607,765,3.701,766,3.701,767,3.701,979,3.701,980,4.383,981,4.383,982,4.383]],["title/miscellaneous/variables.html",[914,1.556,983,3.418]],["body/miscellaneous/variables.html",[13,0.633,24,1.105,26,0.885,27,0.026,28,1.271,95,0.023,96,0.023,614,4.409,616,3.591,624,4.934,651,5.018,875,4.263,914,2.794,919,5.018,983,4.263,984,5.943,985,5.048,986,5.048,987,5.048]]],"invertedIndex":[["",{"_index":27,"title":{},"body":{"entities/Address.html":{},"controllers/AddressController.html":{},"classes/AddressDto.html":{},"modules/AddressModule.html":{},"classes/AddressRepository.html":{},"injectables/AddressService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Course.html":{},"controllers/CourseController.html":{},"classes/CourseDto.html":{},"modules/CourseModule.html":{},"classes/CourseRepository.html":{},"injectables/CourseService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":320,"title":{},"body":{"injectables/AddressService.html":{},"injectables/CourseService.html":{},"injectables/UserService.html":{}}}],["0.1.13",{"_index":907,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":895,"title":{},"body":{"dependencies.html":{}}}],["0.2.41",{"_index":913,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":894,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":901,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":982,"title":{},"body":{"overview.html":{}}}],["1.0.0",{"_index":904,"title":{},"body":{"dependencies.html":{}}}],["1.0.2",{"_index":886,"title":{},"body":{"dependencies.html":{}}}],["1.1.18",{"_index":881,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":866,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":220,"title":{},"body":{"classes/AddressDto.html":{},"classes/UserDto.html":{}}}],["100",{"_index":216,"title":{},"body":{"classes/AddressDto.html":{},"classes/CourseDto.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["1062",{"_index":826,"title":{},"body":{"injectables/UserService.html":{}}}],["11/11",{"_index":873,"title":{},"body":{"coverage.html":{}}}],["12/12",{"_index":868,"title":{},"body":{"coverage.html":{}}}],["180s",{"_index":785,"title":{},"body":{"modules/UserModule.html":{}}}],["2",{"_index":436,"title":{},"body":{"classes/CourseDto.html":{}}}],["2.3.3",{"_index":900,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":889,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":869,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":739,"title":{},"body":{"classes/UserDto.html":{},"overview.html":{}}}],["3.0.2",{"_index":909,"title":{},"body":{"dependencies.html":{}}}],["3.6.0",{"_index":892,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":874,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":441,"title":{},"body":{"classes/CourseDto.html":{},"overview.html":{}}}],["4.0.0",{"_index":902,"title":{},"body":{"dependencies.html":{}}}],["4.14.0",{"_index":898,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":912,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":870,"title":{},"body":{"coverage.html":{}}}],["401",{"_index":843,"title":{},"body":{"injectables/UserService.html":{}}}],["5",{"_index":443,"title":{},"body":{"classes/CourseDto.html":{}}}],["5.2.0",{"_index":887,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":207,"title":{},"body":{"classes/AddressDto.html":{}}}],["6",{"_index":229,"title":{},"body":{"classes/AddressDto.html":{},"classes/UserDto.html":{}}}],["7",{"_index":980,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":910,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":865,"title":{},"body":{"coverage.html":{}}}],["8.0.0",{"_index":882,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":888,"title":{},"body":{"dependencies.html":{}}}],["8.1.0",{"_index":883,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":867,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":981,"title":{},"body":{"overview.html":{}}}],["9/9",{"_index":877,"title":{},"body":{"coverage.html":{}}}],["add",{"_index":211,"title":{},"body":{"classes/AddressDto.html":{},"classes/CourseDto.html":{},"injectables/CourseService.html":{}}}],["addaddress",{"_index":104,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{}}}],["addaddress(@body",{"_index":178,"title":{},"body":{"controllers/AddressController.html":{}}}],["addaddress(address",{"_index":110,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{}}}],["addcourse",{"_index":380,"title":{},"body":{"controllers/CourseController.html":{},"injectables/CourseService.html":{}}}],["addcourse(@body()course:coursedto):promise",{"_index":416,"title":{},"body":{"controllers/CourseController.html":{}}}],["addcourse(course",{"_index":386,"title":{},"body":{"controllers/CourseController.html":{},"injectables/CourseService.html":{}}}],["added",{"_index":760,"title":{},"body":{"classes/UserDto.html":{}}}],["addredd",{"_index":389,"title":{},"body":{"controllers/CourseController.html":{}}}],["address",{"_index":1,"title":{"entities/Address.html":{}},"body":{"entities/Address.html":{},"controllers/AddressController.html":{},"classes/AddressDto.html":{},"modules/AddressModule.html":{},"classes/AddressRepository.html":{},"injectables/AddressService.html":{},"modules/AppModule.html":{},"entities/User.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["address.controller",{"_index":268,"title":{},"body":{"modules/AddressModule.html":{}}}],["address.entity",{"_index":269,"title":{},"body":{"modules/AddressModule.html":{},"classes/AddressRepository.html":{}}}],["address.repository",{"_index":271,"title":{},"body":{"modules/AddressModule.html":{},"injectables/AddressService.html":{}}}],["address.service",{"_index":168,"title":{},"body":{"controllers/AddressController.html":{},"modules/AddressModule.html":{}}}],["address.user",{"_index":634,"title":{},"body":{"entities/User.html":{}}}],["address/address.module",{"_index":341,"title":{},"body":{"modules/AppModule.html":{}}}],["addresscontroller",{"_index":98,"title":{"controllers/AddressController.html":{}},"body":{"controllers/AddressController.html":{},"modules/AddressModule.html":{},"coverage.html":{}}}],["addressdto",{"_index":111,"title":{"classes/AddressDto.html":{}},"body":{"controllers/AddressController.html":{},"classes/AddressDto.html":{},"injectables/AddressService.html":{},"coverage.html":{}}}],["addressdto})@apicreatedresponse({description",{"_index":115,"title":{},"body":{"controllers/AddressController.html":{}}}],["addressmodule",{"_index":254,"title":{"modules/AddressModule.html":{}},"body":{"modules/AddressModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["addressrepo",{"_index":292,"title":{},"body":{"injectables/AddressService.html":{}}}],["addressrepository",{"_index":270,"title":{"classes/AddressRepository.html":{}},"body":{"modules/AddressModule.html":{},"classes/AddressRepository.html":{},"injectables/AddressService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["addresss",{"_index":295,"title":{},"body":{"injectables/AddressService.html":{}}}],["addressservice",{"_index":167,"title":{"injectables/AddressService.html":{}},"body":{"controllers/AddressController.html":{},"modules/AddressModule.html":{},"injectables/AddressService.html":{},"coverage.html":{},"overview.html":{}}}],["admin",{"_index":918,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["again",{"_index":823,"title":{},"body":{"injectables/UserService.html":{}}}],["age",{"_index":631,"title":{},"body":{"entities/User.html":{},"classes/UserDto.html":{}}}],["already",{"_index":827,"title":{},"body":{"injectables/UserService.html":{}}}],["amazing",{"_index":961,"title":{},"body":{"index.html":{}}}],["api",{"_index":212,"title":{},"body":{"classes/AddressDto.html":{},"classes/CourseDto.html":{},"classes/ExceptionExceptionFilter.html":{}}}],["apibody",{"_index":159,"title":{},"body":{"controllers/AddressController.html":{},"controllers/CourseController.html":{},"controllers/UserController.html":{}}}],["apibody({description",{"_index":112,"title":{},"body":{"controllers/AddressController.html":{},"controllers/CourseController.html":{},"controllers/UserController.html":{}}}],["apicreatedresponse",{"_index":160,"title":{},"body":{"controllers/AddressController.html":{},"controllers/CourseController.html":{},"controllers/UserController.html":{}}}],["apiinternalservererrorresponse",{"_index":161,"title":{},"body":{"controllers/AddressController.html":{},"controllers/CourseController.html":{},"controllers/UserController.html":{}}}],["apinotfoundresponse",{"_index":162,"title":{},"body":{"controllers/AddressController.html":{},"controllers/CourseController.html":{},"controllers/UserController.html":{}}}],["apiokresponse",{"_index":163,"title":{},"body":{"controllers/AddressController.html":{},"controllers/CourseController.html":{},"controllers/UserController.html":{}}}],["apiokresponse({description",{"_index":144,"title":{},"body":{"controllers/AddressController.html":{},"controllers/CourseController.html":{},"controllers/UserController.html":{}}}],["apiparam",{"_index":164,"title":{},"body":{"controllers/AddressController.html":{},"controllers/CourseController.html":{},"controllers/UserController.html":{}}}],["apiparam({name",{"_index":130,"title":{},"body":{"controllers/AddressController.html":{},"controllers/CourseController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":237,"title":{},"body":{"classes/AddressDto.html":{},"classes/CourseDto.html":{},"classes/LoginDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isnotempty({message",{"_index":198,"title":{},"body":{"classes/AddressDto.html":{},"classes/CourseDto.html":{},"classes/LoginDto.html":{},"classes/UserDto.html":{}}}],["apitags",{"_index":165,"title":{},"body":{"controllers/AddressController.html":{},"controllers/CourseController.html":{},"controllers/UserController.html":{}}}],["apitags('address",{"_index":170,"title":{},"body":{"controllers/AddressController.html":{}}}],["apitags('course",{"_index":412,"title":{},"body":{"controllers/CourseController.html":{}}}],["apitags('user",{"_index":708,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":323,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"index.html":{}}}],["app.controller",{"_index":342,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":330,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":321,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":932,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":333,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":329,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":506,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["async",{"_index":286,"title":{},"body":{"injectables/AddressService.html":{},"injectables/CourseService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["auth.guard.ts",{"_index":532,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["authguard",{"_index":533,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":535,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["author",{"_index":67,"title":{},"body":{"entities/Address.html":{},"controllers/AddressController.html":{},"classes/AddressDto.html":{},"modules/AddressModule.html":{},"classes/AddressRepository.html":{},"injectables/AddressService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Course.html":{},"controllers/CourseController.html":{},"classes/CourseDto.html":{},"modules/CourseModule.html":{},"classes/CourseRepository.html":{},"injectables/CourseService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{},"index.html":{}}}],["await",{"_index":306,"title":{},"body":{"injectables/AddressService.html":{},"injectables/CourseService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":962,"title":{},"body":{"index.html":{}}}],["base",{"_index":353,"title":{},"body":{"entities/Course.html":{}}}],["bcrypt",{"_index":808,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.compare(userlogin.password",{"_index":831,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.gensalt",{"_index":814,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hash(password",{"_index":816,"title":{},"body":{"injectables/UserService.html":{}}}],["bcryptjs",{"_index":809,"title":{},"body":{"injectables/UserService.html":{},"dependencies.html":{}}}],["bitween",{"_index":60,"title":{},"body":{"entities/Address.html":{},"classes/AddressDto.html":{},"entities/Course.html":{},"classes/CourseDto.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["bitwwen",{"_index":94,"title":{},"body":{"entities/Address.html":{}}}],["body",{"_index":153,"title":{},"body":{"controllers/AddressController.html":{},"controllers/CourseController.html":{},"controllers/UserController.html":{}}}],["body()course:coursedto):promise",{"_index":432,"title":{},"body":{"controllers/CourseController.html":{}}}],["boolean",{"_index":612,"title":{},"body":{"guards/RolesGuard.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["bootstrap",{"_index":872,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":978,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":976,"title":{},"body":{"modules.html":{}}}],["building",{"_index":928,"title":{},"body":{"index.html":{}}}],["business",{"_index":284,"title":{},"body":{"injectables/AddressService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["cache",{"_index":890,"title":{},"body":{"dependencies.html":{}}}],["callhandler",{"_index":588,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["canactivate",{"_index":604,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":609,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivated",{"_index":611,"title":{},"body":{"guards/RolesGuard.html":{}}}],["catch",{"_index":312,"title":{},"body":{"injectables/AddressService.html":{},"injectables/CourseService.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["catch(exception",{"_index":504,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["check",{"_index":987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["city",{"_index":15,"title":{},"body":{"entities/Address.html":{},"classes/AddressDto.html":{}}}],["city:string",{"_index":77,"title":{},"body":{"entities/Address.html":{}}}],["ciurse",{"_index":447,"title":{},"body":{"classes/CourseDto.html":{}}}],["class",{"_index":72,"title":{"classes/AddressDto.html":{},"classes/AddressRepository.html":{},"classes/CourseDto.html":{},"classes/CourseRepository.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{}},"body":{"entities/Address.html":{},"controllers/AddressController.html":{},"classes/AddressDto.html":{},"modules/AddressModule.html":{},"classes/AddressRepository.html":{},"injectables/AddressService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Course.html":{},"controllers/CourseController.html":{},"classes/CourseDto.html":{},"modules/CourseModule.html":{},"classes/CourseRepository.html":{},"injectables/CourseService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["classes",{"_index":196,"title":{},"body":{"classes/AddressDto.html":{},"classes/AddressRepository.html":{},"classes/CourseDto.html":{},"classes/CourseRepository.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"overview.html":{}}}],["cluster_addressmodule",{"_index":257,"title":{},"body":{"modules/AddressModule.html":{},"overview.html":{}}}],["cluster_addressmodule_providers",{"_index":258,"title":{},"body":{"modules/AddressModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":334,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":336,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":335,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_coursemodule",{"_index":458,"title":{},"body":{"modules/CourseModule.html":{},"overview.html":{}}}],["cluster_coursemodule_providers",{"_index":459,"title":{},"body":{"modules/CourseModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":765,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":767,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":766,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":46,"title":{},"body":{"entities/Address.html":{},"classes/ExceptionExceptionFilter.html":{}}}],["colling",{"_index":566,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["colume",{"_index":11,"title":{},"body":{"entities/Address.html":{},"classes/AddressDto.html":{},"entities/Course.html":{},"classes/CourseDto.html":{},"classes/LoginDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["column",{"_index":30,"title":{},"body":{"entities/Address.html":{},"entities/Course.html":{},"entities/User.html":{}}}],["column({type",{"_index":649,"title":{},"body":{"entities/User.html":{}}}],["column({unique",{"_index":640,"title":{},"body":{"entities/User.html":{}}}],["compodoc/compodoc",{"_index":880,"title":{},"body":{"dependencies.html":{}}}],["console.log(\"hashedpassword",{"_index":817,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(\"response",{"_index":821,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log('payload",{"_index":564,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["console.log(response",{"_index":847,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(token",{"_index":836,"title":{},"body":{"injectables/UserService.html":{}}}],["const",{"_index":308,"title":{},"body":{"injectables/AddressService.html":{},"injectables/CourseService.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":287,"title":{},"body":{"injectables/AddressService.html":{},"injectables/CourseService.html":{},"classes/CustomException.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["constructor(addressrepo",{"_index":288,"title":{},"body":{"injectables/AddressService.html":{}}}],["constructor(courserepo",{"_index":472,"title":{},"body":{"injectables/CourseService.html":{}}}],["constructor(message",{"_index":493,"title":{},"body":{"classes/CustomException.html":{}}}],["constructor(private",{"_index":174,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{},"controllers/AppController.html":{},"controllers/CourseController.html":{},"injectables/CourseService.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(reflectore",{"_index":605,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(userrepo",{"_index":545,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["contact",{"_index":648,"title":{},"body":{"entities/User.html":{},"classes/UserDto.html":{}}}],["context",{"_index":595,"title":{},"body":{"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{}}}],["context.getclass",{"_index":622,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":621,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":623,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controler",{"_index":102,"title":{},"body":{"controllers/AddressController.html":{}}}],["controller",{"_index":97,"title":{"controllers/AddressController.html":{},"controllers/AppController.html":{},"controllers/CourseController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AddressController.html":{},"controllers/AppController.html":{},"controllers/CourseController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('address",{"_index":171,"title":{},"body":{"controllers/AddressController.html":{}}}],["controller('course",{"_index":413,"title":{},"body":{"controllers/CourseController.html":{}}}],["controller('user",{"_index":709,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":99,"title":{},"body":{"controllers/AddressController.html":{},"modules/AddressModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/CourseController.html":{},"modules/CourseModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["controllers:[addresscontroller",{"_index":275,"title":{},"body":{"modules/AddressModule.html":{}}}],["controllers:[coursecontroller",{"_index":468,"title":{},"body":{"modules/CourseModule.html":{}}}],["controlller",{"_index":324,"title":{},"body":{"controllers/AppController.html":{}}}],["country",{"_index":16,"title":{},"body":{"entities/Address.html":{},"classes/AddressDto.html":{}}}],["country:string",{"_index":81,"title":{},"body":{"entities/Address.html":{}}}],["course",{"_index":350,"title":{"entities/Course.html":{}},"body":{"entities/Course.html":{},"controllers/CourseController.html":{},"classes/CourseDto.html":{},"modules/CourseModule.html":{},"classes/CourseRepository.html":{},"injectables/CourseService.html":{},"entities/User.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["course.controller",{"_index":462,"title":{},"body":{"modules/CourseModule.html":{}}}],["course.entity",{"_index":463,"title":{},"body":{"modules/CourseModule.html":{},"classes/CourseRepository.html":{}}}],["course.repository",{"_index":465,"title":{},"body":{"modules/CourseModule.html":{},"injectables/CourseService.html":{}}}],["course.service",{"_index":410,"title":{},"body":{"controllers/CourseController.html":{},"modules/CourseModule.html":{}}}],["course.user",{"_index":638,"title":{},"body":{"entities/User.html":{}}}],["course/course.module",{"_index":343,"title":{},"body":{"modules/AppModule.html":{}}}],["course:course",{"_index":662,"title":{},"body":{"entities/User.html":{},"classes/UserDto.html":{}}}],["course=>course.user",{"_index":661,"title":{},"body":{"entities/User.html":{}}}],["course_duration",{"_index":354,"title":{},"body":{"entities/Course.html":{},"classes/CourseDto.html":{}}}],["course_fees",{"_index":355,"title":{},"body":{"entities/Course.html":{},"classes/CourseDto.html":{}}}],["course_starting_date",{"_index":356,"title":{},"body":{"entities/Course.html":{},"classes/CourseDto.html":{}}}],["coursecontroller",{"_index":378,"title":{"controllers/CourseController.html":{}},"body":{"controllers/CourseController.html":{},"modules/CourseModule.html":{},"coverage.html":{}}}],["coursedeletebyid",{"_index":381,"title":{},"body":{"controllers/CourseController.html":{},"injectables/CourseService.html":{}}}],["coursedeletebyid(@param('id')id:number",{"_index":428,"title":{},"body":{"controllers/CourseController.html":{}}}],["coursedeletebyid(id",{"_index":392,"title":{},"body":{"controllers/CourseController.html":{},"injectables/CourseService.html":{}}}],["coursedto",{"_index":387,"title":{"classes/CourseDto.html":{}},"body":{"controllers/CourseController.html":{},"classes/CourseDto.html":{},"injectables/CourseService.html":{},"coverage.html":{}}}],["coursedto})@apicreatedresponse({description",{"_index":388,"title":{},"body":{"controllers/CourseController.html":{}}}],["coursemodule",{"_index":337,"title":{"modules/CourseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CourseModule.html":{},"modules.html":{},"overview.html":{}}}],["courserepo",{"_index":474,"title":{},"body":{"injectables/CourseService.html":{}}}],["courserepository",{"_index":464,"title":{"classes/CourseRepository.html":{}},"body":{"modules/CourseModule.html":{},"classes/CourseRepository.html":{},"injectables/CourseService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["courseservice",{"_index":409,"title":{"injectables/CourseService.html":{}},"body":{"controllers/CourseController.html":{},"modules/CourseModule.html":{},"injectables/CourseService.html":{},"coverage.html":{},"overview.html":{}}}],["courseservice:courseservice",{"_index":414,"title":{},"body":{"controllers/CourseController.html":{}}}],["couse",{"_index":461,"title":{},"body":{"modules/CourseModule.html":{},"injectables/CourseService.html":{}}}],["couser",{"_index":366,"title":{},"body":{"entities/Course.html":{}}}],["couser_name",{"_index":357,"title":{},"body":{"entities/Course.html":{},"classes/CourseDto.html":{}}}],["coverage",{"_index":861,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["creat",{"_index":659,"title":{},"body":{"entities/User.html":{}}}],["create",{"_index":454,"title":{},"body":{"classes/CourseDto.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{}}}],["createing",{"_index":57,"title":{},"body":{"entities/Address.html":{}}}],["creating",{"_index":92,"title":{},"body":{"entities/Address.html":{},"classes/AddressDto.html":{},"entities/Course.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["creation",{"_index":495,"title":{},"body":{"classes/CustomException.html":{}}}],["credential",{"_index":839,"title":{},"body":{"injectables/UserService.html":{}}}],["crude",{"_index":790,"title":{},"body":{"classes/UserRepository.html":{}}}],["ctx",{"_index":512,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":515,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":517,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["custom",{"_index":491,"title":{},"body":{"classes/CustomException.html":{}}}],["customexception",{"_index":487,"title":{"classes/CustomException.html":{}},"body":{"classes/CustomException.html":{},"coverage.html":{}}}],["data",{"_index":352,"title":{},"body":{"entities/Course.html":{},"classes/ExceptionExceptionFilter.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["database",{"_index":9,"title":{},"body":{"entities/Address.html":{}}}],["databse",{"_index":630,"title":{},"body":{"entities/User.html":{}}}],["date",{"_index":364,"title":{},"body":{"entities/Course.html":{},"classes/CourseDto.html":{},"classes/ExceptionExceptionFilter.html":{}}}],["date().toisostring",{"_index":529,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["decorators",{"_index":29,"title":{},"body":{"entities/Address.html":{},"controllers/AddressController.html":{},"classes/AddressDto.html":{},"controllers/AppController.html":{},"entities/Course.html":{},"controllers/CourseController.html":{},"classes/CourseDto.html":{},"classes/LoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{}}}],["default",{"_index":651,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":779,"title":{},"body":{"modules/UserModule.html":{}}}],["define",{"_index":654,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["defined",{"_index":31,"title":{},"body":{"entities/Address.html":{},"controllers/AddressController.html":{},"classes/AddressDto.html":{},"injectables/AddressService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/Course.html":{},"controllers/CourseController.html":{},"classes/CourseDto.html":{},"injectables/CourseService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":154,"title":{},"body":{"controllers/AddressController.html":{},"controllers/CourseController.html":{},"controllers/UserController.html":{}}}],["delete('/coursedeletebyid/:id",{"_index":427,"title":{},"body":{"controllers/CourseController.html":{}}}],["delete('/deleteaddressbyid/:id",{"_index":190,"title":{},"body":{"controllers/AddressController.html":{}}}],["delete('/userdeletebyid/:id",{"_index":732,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteaddressbyid",{"_index":105,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{}}}],["deleteaddressbyid(@param('id",{"_index":191,"title":{},"body":{"controllers/AddressController.html":{}}}],["deleteaddressbyid(id",{"_index":129,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{}}}],["deleted",{"_index":132,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{},"controllers/CourseController.html":{},"injectables/CourseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":256,"title":{"dependencies.html":{}},"body":{"modules/AddressModule.html":{},"modules/AppModule.html":{},"modules/CourseModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"entities/Address.html":{},"controllers/AddressController.html":{},"classes/AddressDto.html":{},"modules/AddressModule.html":{},"classes/AddressRepository.html":{},"injectables/AddressService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Course.html":{},"controllers/CourseController.html":{},"classes/CourseDto.html":{},"modules/CourseModule.html":{},"classes/CourseRepository.html":{},"injectables/CourseService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{},"index.html":{}}}],["development",{"_index":939,"title":{},"body":{"index.html":{}}}],["didgit",{"_index":756,"title":{},"body":{"classes/UserDto.html":{}}}],["digit",{"_index":740,"title":{},"body":{"classes/UserDto.html":{}}}],["digits",{"_index":221,"title":{},"body":{"classes/AddressDto.html":{},"classes/CourseDto.html":{}}}],["digits'})@maxlength(10",{"_index":219,"title":{},"body":{"classes/AddressDto.html":{}}}],["digits'})@maxlength(2",{"_index":435,"title":{},"body":{"classes/CourseDto.html":{}}}],["digits'})@maxlength(5",{"_index":442,"title":{},"body":{"classes/CourseDto.html":{}}}],["disableerrormessages",{"_index":854,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{}}}],["documentation",{"_index":862,"title":{},"body":{"coverage.html":{}}}],["dogits",{"_index":224,"title":{},"body":{"classes/AddressDto.html":{}}}],["dto",{"_index":574,"title":{},"body":{"classes/LoginDto.html":{},"classes/UserDto.html":{}}}],["dto/address.dto",{"_index":169,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{}}}],["dto/course.dto",{"_index":411,"title":{},"body":{"controllers/CourseController.html":{},"injectables/CourseService.html":{}}}],["dto/user.dto",{"_index":704,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["duration",{"_index":360,"title":{},"body":{"entities/Course.html":{},"classes/CourseDto.html":{}}}],["e2e",{"_index":950,"title":{},"body":{"index.html":{}}}],["eamil",{"_index":743,"title":{},"body":{"classes/UserDto.html":{}}}],["efficient",{"_index":929,"title":{},"body":{"index.html":{}}}],["email",{"_index":581,"title":{},"body":{"classes/LoginDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["emailid",{"_index":541,"title":{},"body":{"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["empty",{"_index":244,"title":{},"body":{"classes/AddressDto.html":{},"classes/CourseDto.html":{},"classes/UserDto.html":{}}}],["empty'})@isnumber()@minlength(1",{"_index":737,"title":{},"body":{"classes/UserDto.html":{}}}],["empty'})@isnumber()@minlength(10",{"_index":754,"title":{},"body":{"classes/UserDto.html":{}}}],["empty'})@isnumber()@minlength(6",{"_index":228,"title":{},"body":{"classes/AddressDto.html":{}}}],["empty'})@isstring({message",{"_index":199,"title":{},"body":{"classes/AddressDto.html":{},"classes/CourseDto.html":{},"classes/UserDto.html":{}}}],["empty'})@minlength(1",{"_index":223,"title":{},"body":{"classes/AddressDto.html":{},"classes/CourseDto.html":{}}}],["empty'})@minlength(3",{"_index":744,"title":{},"body":{"classes/UserDto.html":{}}}],["empty'})@minlength(4",{"_index":440,"title":{},"body":{"classes/CourseDto.html":{}}}],["enable/disable",{"_index":858,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{}}}],["enter",{"_index":577,"title":{},"body":{"classes/LoginDto.html":{}}}],["entities",{"_index":2,"title":{},"body":{"entities/Address.html":{},"entities/Course.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":0,"title":{"entities/Address.html":{},"entities/Course.html":{},"entities/User.html":{}},"body":{"entities/Address.html":{},"entities/Course.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity,joincolumn,onetoone",{"_index":65,"title":{},"body":{"entities/Address.html":{}}}],["entityrepository",{"_index":279,"title":{},"body":{"classes/AddressRepository.html":{},"classes/CourseRepository.html":{},"classes/UserRepository.html":{}}}],["entityrepository(address",{"_index":280,"title":{},"body":{"classes/AddressRepository.html":{}}}],["entityrepository(course",{"_index":470,"title":{},"body":{"classes/CourseRepository.html":{}}}],["entityrepository(user",{"_index":792,"title":{},"body":{"classes/UserRepository.html":{}}}],["enum",{"_index":650,"title":{},"body":{"entities/User.html":{}}}],["enumerations",{"_index":915,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":313,"title":{},"body":{"injectables/AddressService.html":{},"injectables/CourseService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["error.errno",{"_index":825,"title":{},"body":{"injectables/UserService.html":{}}}],["error?.status",{"_index":842,"title":{},"body":{"injectables/UserService.html":{}}}],["errors",{"_index":860,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{}}}],["exception",{"_index":492,"title":{},"body":{"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"controllers/UserController.html":{}}}],["exception.exception.ts",{"_index":490,"title":{},"body":{"classes/CustomException.html":{},"coverage.html":{}}}],["exception.exception.ts:7",{"_index":494,"title":{},"body":{"classes/CustomException.html":{}}}],["exception.getstatus",{"_index":519,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["exception.message",{"_index":525,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["exception/custom",{"_index":489,"title":{},"body":{"classes/CustomException.html":{},"coverage.html":{}}}],["exceptionexceptionfilter",{"_index":498,"title":{"classes/ExceptionExceptionFilter.html":{}},"body":{"classes/ExceptionExceptionFilter.html":{},"coverage.html":{}}}],["exceptionfactory",{"_index":855,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{}}}],["exceptionfilter",{"_index":503,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["executioncontext",{"_index":589,"title":{},"body":{"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{}}}],["expiresin",{"_index":784,"title":{},"body":{"modules/UserModule.html":{}}}],["export",{"_index":71,"title":{},"body":{"entities/Address.html":{},"controllers/AddressController.html":{},"classes/AddressDto.html":{},"modules/AddressModule.html":{},"classes/AddressRepository.html":{},"injectables/AddressService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Course.html":{},"controllers/CourseController.html":{},"classes/CourseDto.html":{},"modules/CourseModule.html":{},"classes/CourseRepository.html":{},"injectables/CourseService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["exports",{"_index":273,"title":{},"body":{"modules/AddressModule.html":{},"modules/CourseModule.html":{},"modules/UserModule.html":{}}}],["exports:[typeormmodule,jwtstrategy,passportmodule",{"_index":787,"title":{},"body":{"modules/UserModule.html":{}}}],["express",{"_index":509,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{},"dependencies.html":{}}}],["extends",{"_index":278,"title":{},"body":{"classes/AddressRepository.html":{},"classes/CourseRepository.html":{},"classes/CustomException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/UserRepository.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["extractjwt",{"_index":552,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":563,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failure",{"_index":128,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/CourseController.html":{},"injectables/CourseService.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["fastify",{"_index":896,"title":{},"body":{"dependencies.html":{}}}],["fees",{"_index":362,"title":{},"body":{"entities/Course.html":{},"classes/CourseDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"entities/Address.html":{},"controllers/AddressController.html":{},"classes/AddressDto.html":{},"modules/AddressModule.html":{},"classes/AddressRepository.html":{},"injectables/AddressService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Course.html":{},"controllers/CourseController.html":{},"classes/CourseDto.html":{},"modules/CourseModule.html":{},"classes/CourseRepository.html":{},"injectables/CourseService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{},"coverage.html":{}}}],["filter.filter.ts",{"_index":501,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{},"coverage.html":{}}}],["filter.filter.ts:15",{"_index":507,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["filter/exception",{"_index":500,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{},"coverage.html":{}}}],["find",{"_index":299,"title":{},"body":{"injectables/AddressService.html":{},"controllers/CourseController.html":{},"injectables/CourseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findaddressbyid",{"_index":106,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{}}}],["findaddressbyid(id",{"_index":136,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{}}}],["findaddressbyname",{"_index":107,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{}}}],["findaddressbyname(@param('village",{"_index":194,"title":{},"body":{"controllers/AddressController.html":{}}}],["findaddressbyname(village",{"_index":140,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{}}}],["findalladdress",{"_index":108,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{}}}],["findalladdress(address",{"_index":143,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{}}}],["findallcourse",{"_index":382,"title":{},"body":{"controllers/CourseController.html":{},"injectables/CourseService.html":{}}}],["findallcourse(course",{"_index":395,"title":{},"body":{"controllers/CourseController.html":{},"injectables/CourseService.html":{}}}],["findallcourse(course:coursedto):promise",{"_index":419,"title":{},"body":{"controllers/CourseController.html":{}}}],["findcoursebyid",{"_index":383,"title":{},"body":{"controllers/CourseController.html":{},"injectables/CourseService.html":{}}}],["findcoursebyid(@param('id')id",{"_index":425,"title":{},"body":{"controllers/CourseController.html":{}}}],["findcoursebyid(id",{"_index":398,"title":{},"body":{"controllers/CourseController.html":{},"injectables/CourseService.html":{}}}],["findcoursebyname",{"_index":384,"title":{},"body":{"controllers/CourseController.html":{},"injectables/CourseService.html":{}}}],["findcoursebyname(@param('subject')subject:string):promise",{"_index":422,"title":{},"body":{"controllers/CourseController.html":{}}}],["findcoursebyname(subject",{"_index":402,"title":{},"body":{"controllers/CourseController.html":{},"injectables/CourseService.html":{}}}],["finding",{"_index":802,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbyname",{"_index":665,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["finduserbyname(@param('name",{"_index":725,"title":{},"body":{"controllers/UserController.html":{}}}],["finduserbyname(name",{"_index":672,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["finduserlist",{"_index":666,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["finduserlist(user",{"_index":675,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["five",{"_index":747,"title":{},"body":{"classes/UserDto.html":{}}}],["forbiddenexception",{"_index":806,"title":{},"body":{"injectables/UserService.html":{}}}],["forbiddenexception(error.message",{"_index":844,"title":{},"body":{"injectables/UserService.html":{}}}],["forbiddenexception(message",{"_index":840,"title":{},"body":{"injectables/UserService.html":{}}}],["found",{"_index":137,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{},"controllers/CourseController.html":{},"injectables/CourseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["founded",{"_index":146,"title":{},"body":{"controllers/AddressController.html":{}}}],["framework",{"_index":927,"title":{},"body":{"index.html":{}}}],["function",{"_index":565,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/ValidationPipeOptions.html":{},"coverage.html":{}}}],["functions",{"_index":920,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gali",{"_index":35,"title":{},"body":{"entities/Address.html":{},"classes/AddressDto.html":{}}}],["gali_number",{"_index":17,"title":{},"body":{"entities/Address.html":{},"classes/AddressDto.html":{}}}],["gali_number:string",{"_index":76,"title":{},"body":{"entities/Address.html":{}}}],["gender",{"_index":632,"title":{},"body":{"entities/User.html":{},"classes/UserDto.html":{}}}],["generate",{"_index":368,"title":{},"body":{"entities/Course.html":{}}}],["generating",{"_index":41,"title":{},"body":{"entities/Address.html":{}}}],["get('/findaddressbyid/:id",{"_index":185,"title":{},"body":{"controllers/AddressController.html":{}}}],["get('/findaddressbyname/:village",{"_index":193,"title":{},"body":{"controllers/AddressController.html":{}}}],["get('/findalladdress",{"_index":182,"title":{},"body":{"controllers/AddressController.html":{}}}],["get('/findallcourse",{"_index":418,"title":{},"body":{"controllers/CourseController.html":{}}}],["get('/findcoursebyid/:id",{"_index":424,"title":{},"body":{"controllers/CourseController.html":{}}}],["get('/findcoursebyname/:subject",{"_index":421,"title":{},"body":{"controllers/CourseController.html":{}}}],["get('/finduserbyname/:name",{"_index":724,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/finduserlist",{"_index":718,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/userfindbyid/:id",{"_index":721,"title":{},"body":{"controllers/UserController.html":{}}}],["gethello",{"_index":325,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getrequest",{"_index":514,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["getresponse",{"_index":516,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["getstatus",{"_index":518,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["getting",{"_index":923,"title":{"index.html":{}},"body":{}}],["grow",{"_index":957,"title":{},"body":{"index.html":{}}}],["guard",{"_index":600,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":602,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/roles.guard",{"_index":774,"title":{},"body":{"modules/UserModule.html":{}}}],["hashedpassword",{"_index":815,"title":{},"body":{"injectables/UserService.html":{}}}],["hello",{"_index":348,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":439,"title":{},"body":{"classes/CourseDto.html":{},"classes/ExceptionExceptionFilter.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["host",{"_index":505,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":513,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["hotel",{"_index":558,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules/UserModule.html":{}}}],["house",{"_index":38,"title":{},"body":{"entities/Address.html":{},"classes/AddressDto.html":{}}}],["house_number",{"_index":18,"title":{},"body":{"entities/Address.html":{},"classes/AddressDto.html":{}}}],["house_number:string",{"_index":75,"title":{},"body":{"entities/Address.html":{}}}],["httpexception",{"_index":302,"title":{},"body":{"injectables/AddressService.html":{},"classes/CustomException.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["httpexception(error.message",{"_index":569,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["httpexception(error.messsage",{"_index":849,"title":{},"body":{"injectables/UserService.html":{}}}],["https://nestjs.com",{"_index":972,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":155,"title":{},"body":{"controllers/AddressController.html":{},"controllers/CourseController.html":{},"classes/CustomException.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["httpstatus.created",{"_index":175,"title":{},"body":{"controllers/AddressController.html":{},"controllers/CourseController.html":{},"controllers/UserController.html":{}}}],["httpstatus.internal_server_error",{"_index":176,"title":{},"body":{"controllers/AddressController.html":{},"controllers/CourseController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["httpstatus.not_found",{"_index":184,"title":{},"body":{"controllers/AddressController.html":{},"controllers/CourseController.html":{},"classes/CustomException.html":{},"controllers/UserController.html":{}}}],["httpstatus.ok",{"_index":181,"title":{},"body":{"controllers/AddressController.html":{},"controllers/CourseController.html":{},"controllers/UserController.html":{}}}],["httpstatus.unauthorized",{"_index":570,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["hussain",{"_index":70,"title":{},"body":{"entities/Address.html":{},"controllers/AddressController.html":{},"classes/AddressDto.html":{},"modules/AddressModule.html":{},"classes/AddressRepository.html":{},"injectables/AddressService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/CourseController.html":{},"classes/CourseDto.html":{},"modules/CourseModule.html":{},"classes/CourseRepository.html":{},"injectables/CourseService.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["husssain",{"_index":377,"title":{},"body":{"entities/Course.html":{},"classes/CustomException.html":{}}}],["id",{"_index":19,"title":{},"body":{"entities/Address.html":{},"controllers/AddressController.html":{},"classes/AddressDto.html":{},"injectables/AddressService.html":{},"entities/Course.html":{},"controllers/CourseController.html":{},"classes/CourseDto.html":{},"injectables/CourseService.html":{},"classes/LoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["id:number",{"_index":73,"title":{},"body":{"entities/Address.html":{}}}],["identifier",{"_index":863,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":502,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{}}}],["import",{"_index":63,"title":{},"body":{"entities/Address.html":{},"controllers/AddressController.html":{},"classes/AddressDto.html":{},"modules/AddressModule.html":{},"classes/AddressRepository.html":{},"injectables/AddressService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Course.html":{},"controllers/CourseController.html":{},"classes/CourseDto.html":{},"modules/CourseModule.html":{},"classes/CourseRepository.html":{},"injectables/CourseService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["imports",{"_index":340,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["imports:[typeormmodule.forfeature([address,addressrepository,user,userrepository",{"_index":272,"title":{},"body":{"modules/AddressModule.html":{}}}],["imports:[typeormmodule.forfeature([course,courserepository,user,userrepository",{"_index":466,"title":{},"body":{"modules/CourseModule.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"entities/Address.html":{},"controllers/AddressController.html":{},"classes/AddressDto.html":{},"injectables/AddressService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/Course.html":{},"controllers/CourseController.html":{},"classes/CourseDto.html":{},"injectables/CourseService.html":{},"classes/ExceptionExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"entities/Address.html":{},"controllers/AddressController.html":{},"classes/AddressDto.html":{},"modules/AddressModule.html":{},"classes/AddressRepository.html":{},"injectables/AddressService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Course.html":{},"controllers/CourseController.html":{},"classes/CourseDto.html":{},"modules/CourseModule.html":{},"classes/CourseRepository.html":{},"injectables/CourseService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["information",{"_index":799,"title":{},"body":{"injectables/UserService.html":{}}}],["inject",{"_index":796,"title":{},"body":{"injectables/UserService.html":{}}}],["injectable",{"_index":173,"title":{"injectables/AddressService.html":{},"injectables/AppService.html":{},"injectables/CourseService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{}},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/CourseController.html":{},"injectables/CourseService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":281,"title":{},"body":{"injectables/AddressService.html":{},"injectables/AppService.html":{},"injectables/CourseService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["inserted",{"_index":116,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{},"injectables/CourseService.html":{}}}],["installation",{"_index":936,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":938,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":627,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":597,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["interceptor/transform.interceptor.ts",{"_index":586,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["interceptor/transform.interceptor.ts:24",{"_index":628,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["interface",{"_index":536,"title":{"interfaces/JwtPayload.html":{},"interfaces/Response.html":{},"interfaces/ValidationPipeOptions.html":{}},"body":{"interfaces/JwtPayload.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"interfaces/ValidationPipeOptions.html":{},"coverage.html":{}}}],["interfaces",{"_index":538,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/Response.html":{},"interfaces/ValidationPipeOptions.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":303,"title":{},"body":{"injectables/AddressService.html":{},"injectables/CourseService.html":{},"injectables/UserService.html":{}}}],["internalservererrorexception(error.message",{"_index":314,"title":{},"body":{"injectables/AddressService.html":{},"injectables/CourseService.html":{},"injectables/UserService.html":{}}}],["internalservererrorexception(message",{"_index":311,"title":{},"body":{"injectables/AddressService.html":{},"injectables/CourseService.html":{},"injectables/UserService.html":{}}}],["invalid",{"_index":838,"title":{},"body":{"injectables/UserService.html":{}}}],["inverse",{"_index":86,"title":{},"body":{"entities/Address.html":{},"entities/Course.html":{},"entities/User.html":{}}}],["isemail",{"_index":583,"title":{},"body":{"classes/LoginDto.html":{}}}],["isnotempty",{"_index":238,"title":{},"body":{"classes/AddressDto.html":{},"classes/CourseDto.html":{},"classes/LoginDto.html":{},"classes/UserDto.html":{}}}],["isnumber",{"_index":239,"title":{},"body":{"classes/AddressDto.html":{},"classes/UserDto.html":{}}}],["isstring",{"_index":240,"title":{},"body":{"classes/AddressDto.html":{},"classes/CourseDto.html":{},"classes/UserDto.html":{}}}],["join",{"_index":90,"title":{},"body":{"entities/Address.html":{},"index.html":{}}}],["joincolumn",{"_index":91,"title":{},"body":{"entities/Address.html":{}}}],["jwt",{"_index":555,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["jwt/jwt",{"_index":810,"title":{},"body":{"injectables/UserService.html":{}}}],["jwt/jwt.strategy",{"_index":775,"title":{},"body":{"modules/UserModule.html":{}}}],["jwtauthguard",{"_index":530,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":562,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":769,"title":{},"body":{"modules/UserModule.html":{}}}],["jwtmodule.register",{"_index":780,"title":{},"body":{"modules/UserModule.html":{}}}],["jwtpayload",{"_index":537,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["jwtservice",{"_index":794,"title":{},"body":{"injectables/UserService.html":{}}}],["jwtservice:jwtservice",{"_index":812,"title":{},"body":{"injectables/UserService.html":{}}}],["jwtstrategy",{"_index":543,"title":{"injectables/JwtStrategy.html":{}},"body":{"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":969,"title":{},"body":{"index.html":{}}}],["key",{"_index":43,"title":{},"body":{"entities/Address.html":{}}}],["later",{"_index":824,"title":{},"body":{"injectables/UserService.html":{}}}],["length",{"_index":202,"title":{},"body":{"classes/AddressDto.html":{}}}],["leter",{"_index":246,"title":{},"body":{"classes/AddressDto.html":{},"classes/CourseDto.html":{},"classes/UserDto.html":{}}}],["leter'})@maxlength(100",{"_index":215,"title":{},"body":{"classes/AddressDto.html":{},"classes/CourseDto.html":{},"classes/UserDto.html":{}}}],["leter'})@maxlength(50",{"_index":205,"title":{},"body":{"classes/AddressDto.html":{}}}],["leter'})@maxlength(6",{"_index":748,"title":{},"body":{"classes/UserDto.html":{}}}],["leters",{"_index":208,"title":{},"body":{"classes/AddressDto.html":{},"classes/CourseDto.html":{},"classes/UserDto.html":{}}}],["level",{"_index":688,"title":{},"body":{"controllers/UserController.html":{}}}],["license",{"_index":975,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":954,"title":{},"body":{"index.html":{}}}],["list",{"_index":145,"title":{},"body":{"controllers/AddressController.html":{},"controllers/UserController.html":{}}}],["local",{"_index":903,"title":{},"body":{"dependencies.html":{}}}],["logic",{"_index":285,"title":{},"body":{"injectables/AddressService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["login",{"_index":573,"title":{},"body":{"classes/LoginDto.html":{},"controllers/UserController.html":{}}}],["login.dto",{"_index":705,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["logindto",{"_index":571,"title":{"classes/LoginDto.html":{}},"body":{"classes/LoginDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["logindto):promise",{"_index":715,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["logindto})@apicreatedresponse({description",{"_index":690,"title":{},"body":{"controllers/UserController.html":{}}}],["main",{"_index":922,"title":{},"body":{"miscellaneous/functions.html":{}}}],["managements",{"_index":559,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules/UserModule.html":{}}}],["manager",{"_index":891,"title":{},"body":{"dependencies.html":{}}}],["many",{"_index":375,"title":{},"body":{"entities/Course.html":{}}}],["manytoone",{"_index":376,"title":{},"body":{"entities/Course.html":{}}}],["manytoone(undefined",{"_index":372,"title":{},"body":{"entities/Course.html":{}}}],["map",{"_index":591,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["maping",{"_index":598,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["mapping",{"_index":8,"title":{},"body":{"entities/Address.html":{},"entities/Course.html":{},"entities/User.html":{}}}],["matching",{"_index":96,"title":{},"body":{"entities/Address.html":{},"controllers/AddressController.html":{},"classes/AddressDto.html":{},"modules/AddressModule.html":{},"classes/AddressRepository.html":{},"injectables/AddressService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Course.html":{},"controllers/CourseController.html":{},"classes/CourseDto.html":{},"modules/CourseModule.html":{},"classes/CourseRepository.html":{},"injectables/CourseService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":206,"title":{},"body":{"classes/AddressDto.html":{},"classes/CourseDto.html":{},"classes/UserDto.html":{}}}],["maxlength",{"_index":241,"title":{},"body":{"classes/AddressDto.html":{},"classes/CourseDto.html":{},"classes/UserDto.html":{}}}],["maxlength(10",{"_index":249,"title":{},"body":{"classes/AddressDto.html":{}}}],["maxlength(100",{"_index":247,"title":{},"body":{"classes/AddressDto.html":{},"classes/CourseDto.html":{},"classes/UserDto.html":{}}}],["maxlength(2",{"_index":455,"title":{},"body":{"classes/CourseDto.html":{}}}],["maxlength(3",{"_index":764,"title":{},"body":{"classes/UserDto.html":{}}}],["maxlength(5",{"_index":457,"title":{},"body":{"classes/CourseDto.html":{}}}],["maxlength(50",{"_index":251,"title":{},"body":{"classes/AddressDto.html":{}}}],["maxlength(6",{"_index":230,"title":{},"body":{"classes/AddressDto.html":{},"classes/UserDto.html":{}}}],["md",{"_index":68,"title":{},"body":{"entities/Address.html":{},"controllers/AddressController.html":{},"classes/AddressDto.html":{},"modules/AddressModule.html":{},"classes/AddressRepository.html":{},"injectables/AddressService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Course.html":{},"controllers/CourseController.html":{},"classes/CourseDto.html":{},"modules/CourseModule.html":{},"classes/CourseRepository.html":{},"injectables/CourseService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["messaage",{"_index":584,"title":{},"body":{"classes/LoginDto.html":{}}}],["message",{"_index":201,"title":{},"body":{"classes/AddressDto.html":{},"injectables/AddressService.html":{},"classes/CourseDto.html":{},"injectables/CourseService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["metadata",{"_index":906,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":328,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/UserController.html":{}}}],["methods",{"_index":103,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/CourseController.html":{},"injectables/CourseService.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["minimum",{"_index":203,"title":{},"body":{"classes/AddressDto.html":{},"classes/CourseDto.html":{},"classes/UserDto.html":{}}}],["minlength",{"_index":242,"title":{},"body":{"classes/AddressDto.html":{},"classes/CourseDto.html":{},"classes/UserDto.html":{}}}],["minlength(1",{"_index":248,"title":{},"body":{"classes/AddressDto.html":{},"classes/CourseDto.html":{},"classes/UserDto.html":{}}}],["minlength(10",{"_index":761,"title":{},"body":{"classes/UserDto.html":{}}}],["minlength(2",{"_index":250,"title":{},"body":{"classes/AddressDto.html":{},"classes/CourseDto.html":{}}}],["minlength(3",{"_index":245,"title":{},"body":{"classes/AddressDto.html":{},"classes/UserDto.html":{}}}],["minlength(4",{"_index":456,"title":{},"body":{"classes/CourseDto.html":{}}}],["minlength(5",{"_index":762,"title":{},"body":{"classes/UserDto.html":{}}}],["minlength(6",{"_index":252,"title":{},"body":{"classes/AddressDto.html":{}}}],["miscellaneous",{"_index":914,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":953,"title":{},"body":{"index.html":{}}}],["mode",{"_index":943,"title":{},"body":{"index.html":{}}}],["module",{"_index":253,"title":{"modules/AddressModule.html":{},"modules/AppModule.html":{},"modules/CourseModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AddressModule.html":{},"modules/AppModule.html":{},"modules/CourseModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":255,"title":{"modules.html":{}},"body":{"modules/AddressModule.html":{},"modules/AppModule.html":{},"modules/CourseModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":966,"title":{},"body":{"index.html":{}}}],["mysql2",{"_index":899,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":970,"title":{},"body":{"index.html":{}}}],["name",{"_index":12,"title":{},"body":{"entities/Address.html":{},"controllers/AddressController.html":{},"classes/AddressDto.html":{},"injectables/AddressService.html":{},"entities/Course.html":{},"controllers/CourseController.html":{},"classes/CourseDto.html":{},"injectables/CourseService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["nasir",{"_index":69,"title":{},"body":{"entities/Address.html":{},"controllers/AddressController.html":{},"classes/AddressDto.html":{},"modules/AddressModule.html":{},"classes/AddressRepository.html":{},"injectables/AddressService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Course.html":{},"controllers/CourseController.html":{},"classes/CourseDto.html":{},"modules/CourseModule.html":{},"classes/CourseRepository.html":{},"injectables/CourseService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["nest",{"_index":933,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":974,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":590,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs/common",{"_index":158,"title":{},"body":{"controllers/AddressController.html":{},"modules/AddressModule.html":{},"injectables/AddressService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/CourseController.html":{},"modules/CourseModule.html":{},"injectables/CourseService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":613,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":770,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":534,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":884,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":885,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":166,"title":{},"body":{"controllers/AddressController.html":{},"classes/AddressDto.html":{},"controllers/CourseController.html":{},"classes/CourseDto.html":{},"classes/LoginDto.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":265,"title":{},"body":{"modules/AddressModule.html":{},"modules/AppModule.html":{},"modules/CourseModule.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["new",{"_index":310,"title":{},"body":{"injectables/AddressService.html":{},"injectables/CourseService.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["next",{"_index":596,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(map(data",{"_index":599,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["node.js",{"_index":926,"title":{},"body":{"index.html":{}}}],["npm",{"_index":937,"title":{},"body":{"index.html":{}}}],["number",{"_index":36,"title":{},"body":{"entities/Address.html":{},"controllers/AddressController.html":{},"classes/AddressDto.html":{},"injectables/AddressService.html":{},"entities/Course.html":{},"controllers/CourseController.html":{},"classes/CourseDto.html":{},"injectables/CourseService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["number'})@maxlength(100",{"_index":752,"title":{},"body":{"classes/UserDto.html":{}}}],["number'})@minlength(1",{"_index":218,"title":{},"body":{"classes/AddressDto.html":{}}}],["numbers",{"_index":757,"title":{},"body":{"classes/UserDto.html":{}}}],["numbers'})@maxlength(100",{"_index":755,"title":{},"body":{"classes/UserDto.html":{}}}],["obj",{"_index":679,"title":{},"body":{"controllers/UserController.html":{}}}],["object",{"_index":93,"title":{},"body":{"entities/Address.html":{},"entities/Course.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{}}}],["observable",{"_index":592,"title":{},"body":{"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{}}}],["office",{"_index":52,"title":{},"body":{"entities/Address.html":{},"classes/AddressDto.html":{}}}],["one",{"_index":58,"title":{},"body":{"entities/Address.html":{},"classes/AddressDto.html":{},"entities/Course.html":{},"classes/CourseDto.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["onetomany",{"_index":657,"title":{},"body":{"entities/User.html":{}}}],["onetomany(()=>course",{"_index":660,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":637,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":83,"title":{},"body":{"entities/Address.html":{},"entities/User.html":{}}}],["onetoone(undefined",{"_index":54,"title":{},"body":{"entities/Address.html":{},"entities/User.html":{}}}],["open",{"_index":955,"title":{},"body":{"index.html":{}}}],["opretion",{"_index":791,"title":{},"body":{"classes/UserRepository.html":{}}}],["optional",{"_index":123,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{},"controllers/CourseController.html":{},"injectables/CourseService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["out",{"_index":261,"title":{},"body":{"modules/AddressModule.html":{},"modules/AppModule.html":{},"modules/CourseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":979,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":879,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":156,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{},"controllers/AppController.html":{},"controllers/CourseController.html":{},"injectables/CourseService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["parameter",{"_index":89,"title":{},"body":{"entities/Address.html":{},"entities/Course.html":{},"entities/User.html":{}}}],["parameters",{"_index":122,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{},"controllers/CourseController.html":{},"injectables/CourseService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["particular",{"_index":686,"title":{},"body":{"controllers/UserController.html":{}}}],["pass",{"_index":828,"title":{},"body":{"injectables/UserService.html":{}}}],["passing",{"_index":524,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["passport",{"_index":554,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":771,"title":{},"body":{"modules/UserModule.html":{}}}],["passportmodule.register",{"_index":778,"title":{},"body":{"modules/UserModule.html":{}}}],["passportstrategy",{"_index":551,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":560,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":575,"title":{},"body":{"classes/LoginDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["path",{"_index":124,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{},"controllers/CourseController.html":{},"injectables/CourseService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["payload",{"_index":550,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["payload.emailid",{"_index":568,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":557,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["payload.interface.ts",{"_index":540,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["perimary",{"_index":369,"title":{},"body":{"entities/Course.html":{}}}],["phone",{"_index":633,"title":{},"body":{"entities/User.html":{},"classes/UserDto.html":{}}}],["pin",{"_index":45,"title":{},"body":{"entities/Address.html":{}}}],["pin_code",{"_index":20,"title":{},"body":{"entities/Address.html":{},"classes/AddressDto.html":{}}}],["pin_code:number",{"_index":82,"title":{},"body":{"entities/Address.html":{}}}],["pincode",{"_index":227,"title":{},"body":{"classes/AddressDto.html":{}}}],["please",{"_index":964,"title":{},"body":{"index.html":{}}}],["police",{"_index":48,"title":{},"body":{"entities/Address.html":{},"classes/AddressDto.html":{}}}],["police_station",{"_index":21,"title":{},"body":{"entities/Address.html":{},"classes/AddressDto.html":{}}}],["police_station:string",{"_index":79,"title":{},"body":{"entities/Address.html":{}}}],["post",{"_index":51,"title":{},"body":{"entities/Address.html":{},"controllers/AddressController.html":{},"classes/AddressDto.html":{},"controllers/CourseController.html":{},"controllers/UserController.html":{}}}],["post('/addaddress",{"_index":177,"title":{},"body":{"controllers/AddressController.html":{}}}],["post('/addcourse",{"_index":415,"title":{},"body":{"controllers/CourseController.html":{}}}],["post('/register",{"_index":710,"title":{},"body":{"controllers/UserController.html":{}}}],["post('/userlogin",{"_index":713,"title":{},"body":{"controllers/UserController.html":{}}}],["post_office",{"_index":22,"title":{},"body":{"entities/Address.html":{},"classes/AddressDto.html":{}}}],["post_office:string",{"_index":78,"title":{},"body":{"entities/Address.html":{}}}],["prefix",{"_index":101,"title":{},"body":{"controllers/AddressController.html":{},"controllers/CourseController.html":{},"controllers/UserController.html":{}}}],["primary",{"_index":42,"title":{},"body":{"entities/Address.html":{}}}],["primarygeneratedcolumn",{"_index":39,"title":{},"body":{"entities/Address.html":{},"entities/Course.html":{},"entities/User.html":{}}}],["private",{"_index":811,"title":{},"body":{"injectables/UserService.html":{}}}],["production",{"_index":945,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":925,"title":{},"body":{"index.html":{}}}],["project",{"_index":956,"title":{},"body":{"index.html":{}}}],["promise",{"_index":126,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{},"controllers/CourseController.html":{},"injectables/CourseService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":14,"title":{},"body":{"entities/Address.html":{},"classes/AddressDto.html":{},"entities/Course.html":{},"classes/CourseDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"entities/User.html":{},"classes/UserDto.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["property",{"_index":213,"title":{},"body":{"classes/AddressDto.html":{},"classes/CourseDto.html":{}}}],["providers",{"_index":263,"title":{},"body":{"modules/AddressModule.html":{},"modules/AppModule.html":{},"modules/CourseModule.html":{},"modules/UserModule.html":{}}}],["providers:[addressservice",{"_index":274,"title":{},"body":{"modules/AddressModule.html":{}}}],["providers:[courseservice",{"_index":467,"title":{},"body":{"modules/CourseModule.html":{}}}],["put",{"_index":157,"title":{},"body":{"controllers/AddressController.html":{},"controllers/CourseController.html":{},"controllers/UserController.html":{}}}],["put('/updateaddressbyid/:id",{"_index":187,"title":{},"body":{"controllers/AddressController.html":{}}}],["put('/updatecoursebyid/:id",{"_index":430,"title":{},"body":{"controllers/CourseController.html":{}}}],["put('/userupdatebyid/:id",{"_index":727,"title":{},"body":{"controllers/UserController.html":{}}}],["read",{"_index":965,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":331,"title":{},"body":{"controllers/AppController.html":{}}}],["recourd",{"_index":687,"title":{},"body":{"controllers/UserController.html":{}}}],["reflect",{"_index":905,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":606,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reflectore",{"_index":608,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reflectore:reflector",{"_index":618,"title":{},"body":{"guards/RolesGuard.html":{}}}],["registered",{"_index":696,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["registering",{"_index":699,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["relation",{"_index":59,"title":{},"body":{"entities/Address.html":{},"classes/AddressDto.html":{},"entities/Course.html":{},"classes/CourseDto.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["repo",{"_index":291,"title":{},"body":{"injectables/AddressService.html":{},"injectables/JwtStrategy.html":{}}}],["repository",{"_index":277,"title":{},"body":{"classes/AddressRepository.html":{},"classes/CourseRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"index.html":{}}}],["request",{"_index":508,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["request.url",{"_index":527,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["required",{"_index":113,"title":{},"body":{"controllers/AddressController.html":{},"controllers/CourseController.html":{},"classes/LoginDto.html":{},"controllers/UserController.html":{}}}],["required'})@isemail({messaage",{"_index":576,"title":{},"body":{"classes/LoginDto.html":{}}}],["requiredroles",{"_index":619,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":625,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reset",{"_index":260,"title":{},"body":{"modules/AddressModule.html":{},"modules/AppModule.html":{},"modules/CourseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":305,"title":{"interfaces/Response.html":{}},"body":{"injectables/AddressService.html":{},"injectables/CourseService.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["response,statuscode,message,url,time",{"_index":520,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["response.affected",{"_index":319,"title":{},"body":{"injectables/AddressService.html":{},"injectables/CourseService.html":{},"injectables/UserService.html":{}}}],["response.status(status).json",{"_index":521,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["responsible",{"_index":789,"title":{},"body":{"classes/UserRepository.html":{}}}],["results",{"_index":95,"title":{},"body":{"entities/Address.html":{},"controllers/AddressController.html":{},"classes/AddressDto.html":{},"modules/AddressModule.html":{},"classes/AddressRepository.html":{},"injectables/AddressService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Course.html":{},"controllers/CourseController.html":{},"classes/CourseDto.html":{},"modules/CourseModule.html":{},"classes/CourseRepository.html":{},"injectables/CourseService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":179,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/CourseController.html":{},"injectables/CourseService.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":125,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/CourseController.html":{},"injectables/CourseService.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["rimraf",{"_index":908,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":616,"title":{},"body":{"guards/RolesGuard.html":{},"entities/User.html":{},"classes/UserDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.user",{"_index":658,"title":{},"body":{"entities/User.html":{}}}],["role/roles.decorator",{"_index":615,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles",{"_index":624,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":730,"title":{},"body":{"controllers/UserController.html":{}}}],["roles_key",{"_index":614,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":601,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["rolse",{"_index":542,"title":{},"body":{"interfaces/JwtPayload.html":{},"classes/UserDto.html":{},"miscellaneous/enumerations.html":{}}}],["rolse/role",{"_index":617,"title":{},"body":{"guards/RolesGuard.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["run",{"_index":940,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":593,"title":{},"body":{"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["salt",{"_index":813,"title":{},"body":{"injectables/UserService.html":{}}}],["scalable",{"_index":930,"title":{},"body":{"index.html":{}}}],["second",{"_index":88,"title":{},"body":{"entities/Address.html":{},"entities/Course.html":{},"entities/User.html":{}}}],["secret",{"_index":781,"title":{},"body":{"modules/UserModule.html":{}}}],["secretorkey:'topsecret51",{"_index":561,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["sending",{"_index":522,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["server",{"_index":931,"title":{},"body":{"index.html":{}}}],["service",{"_index":172,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/CourseService.html":{},"injectables/UserService.html":{}}}],["servise",{"_index":290,"title":{},"body":{"injectables/AddressService.html":{}}}],["setmatadata",{"_index":986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(roles_key",{"_index":985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":87,"title":{},"body":{"entities/Address.html":{},"entities/Course.html":{},"entities/User.html":{},"index.html":{}}}],["signoptions",{"_index":783,"title":{},"body":{"modules/UserModule.html":{}}}],["simpal",{"_index":327,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["source",{"_index":4,"title":{},"body":{"entities/Address.html":{},"controllers/AddressController.html":{},"classes/AddressDto.html":{},"modules/AddressModule.html":{},"classes/AddressRepository.html":{},"injectables/AddressService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Course.html":{},"controllers/CourseController.html":{},"classes/CourseDto.html":{},"modules/CourseModule.html":{},"classes/CourseRepository.html":{},"injectables/CourseService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{},"index.html":{}}}],["specify",{"_index":85,"title":{},"body":{"entities/Address.html":{},"entities/Course.html":{},"entities/User.html":{}}}],["sponsors",{"_index":959,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":921,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../role.ts",{"_index":916,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/address/address.controller.ts",{"_index":100,"title":{},"body":{"controllers/AddressController.html":{},"coverage.html":{}}}],["src/address/address.controller.ts:106",{"_index":142,"title":{},"body":{"controllers/AddressController.html":{}}}],["src/address/address.controller.ts:26",{"_index":121,"title":{},"body":{"controllers/AddressController.html":{}}}],["src/address/address.controller.ts:37",{"_index":148,"title":{},"body":{"controllers/AddressController.html":{}}}],["src/address/address.controller.ts:54",{"_index":139,"title":{},"body":{"controllers/AddressController.html":{}}}],["src/address/address.controller.ts:72",{"_index":152,"title":{},"body":{"controllers/AddressController.html":{}}}],["src/address/address.controller.ts:89",{"_index":135,"title":{},"body":{"controllers/AddressController.html":{}}}],["src/address/address.entity",{"_index":655,"title":{},"body":{"entities/User.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{}}}],["src/address/address.entity.ts",{"_index":6,"title":{},"body":{"entities/Address.html":{},"coverage.html":{}}}],["src/address/address.entity.ts:16",{"_index":40,"title":{},"body":{"entities/Address.html":{}}}],["src/address/address.entity.ts:21",{"_index":61,"title":{},"body":{"entities/Address.html":{}}}],["src/address/address.entity.ts:26",{"_index":37,"title":{},"body":{"entities/Address.html":{}}}],["src/address/address.entity.ts:31",{"_index":34,"title":{},"body":{"entities/Address.html":{}}}],["src/address/address.entity.ts:36",{"_index":32,"title":{},"body":{"entities/Address.html":{}}}],["src/address/address.entity.ts:41",{"_index":50,"title":{},"body":{"entities/Address.html":{}}}],["src/address/address.entity.ts:46",{"_index":47,"title":{},"body":{"entities/Address.html":{}}}],["src/address/address.entity.ts:51",{"_index":53,"title":{},"body":{"entities/Address.html":{}}}],["src/address/address.entity.ts:56",{"_index":33,"title":{},"body":{"entities/Address.html":{}}}],["src/address/address.entity.ts:61",{"_index":44,"title":{},"body":{"entities/Address.html":{}}}],["src/address/address.entity.ts:74",{"_index":56,"title":{},"body":{"entities/Address.html":{}}}],["src/address/address.module.ts",{"_index":262,"title":{},"body":{"modules/AddressModule.html":{}}}],["src/address/address.repository",{"_index":772,"title":{},"body":{"modules/UserModule.html":{}}}],["src/address/address.repository.ts",{"_index":276,"title":{},"body":{"classes/AddressRepository.html":{},"coverage.html":{}}}],["src/address/address.service.ts",{"_index":282,"title":{},"body":{"injectables/AddressService.html":{},"coverage.html":{}}}],["src/address/address.service.ts:105",{"_index":294,"title":{},"body":{"injectables/AddressService.html":{}}}],["src/address/address.service.ts:126",{"_index":298,"title":{},"body":{"injectables/AddressService.html":{}}}],["src/address/address.service.ts:20",{"_index":293,"title":{},"body":{"injectables/AddressService.html":{}}}],["src/address/address.service.ts:42",{"_index":300,"title":{},"body":{"injectables/AddressService.html":{}}}],["src/address/address.service.ts:63",{"_index":297,"title":{},"body":{"injectables/AddressService.html":{}}}],["src/address/address.service.ts:84",{"_index":301,"title":{},"body":{"injectables/AddressService.html":{}}}],["src/address/address.service.ts:9",{"_index":289,"title":{},"body":{"injectables/AddressService.html":{}}}],["src/address/dto/address.dto.ts",{"_index":197,"title":{},"body":{"classes/AddressDto.html":{},"coverage.html":{}}}],["src/address/dto/address.dto.ts:108",{"_index":231,"title":{},"body":{"classes/AddressDto.html":{}}}],["src/address/dto/address.dto.ts:112",{"_index":235,"title":{},"body":{"classes/AddressDto.html":{}}}],["src/address/dto/address.dto.ts:12",{"_index":226,"title":{},"body":{"classes/AddressDto.html":{}}}],["src/address/dto/address.dto.ts:21",{"_index":236,"title":{},"body":{"classes/AddressDto.html":{}}}],["src/address/dto/address.dto.ts:31",{"_index":225,"title":{},"body":{"classes/AddressDto.html":{}}}],["src/address/dto/address.dto.ts:42",{"_index":222,"title":{},"body":{"classes/AddressDto.html":{}}}],["src/address/dto/address.dto.ts:53",{"_index":209,"title":{},"body":{"classes/AddressDto.html":{}}}],["src/address/dto/address.dto.ts:64",{"_index":233,"title":{},"body":{"classes/AddressDto.html":{}}}],["src/address/dto/address.dto.ts:75",{"_index":232,"title":{},"body":{"classes/AddressDto.html":{}}}],["src/address/dto/address.dto.ts:86",{"_index":234,"title":{},"body":{"classes/AddressDto.html":{}}}],["src/address/dto/address.dto.ts:97",{"_index":217,"title":{},"body":{"classes/AddressDto.html":{}}}],["src/app.controller.ts",{"_index":322,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:19",{"_index":326,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":339,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":346,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:12",{"_index":347,"title":{},"body":{"injectables/AppService.html":{}}}],["src/common/custom",{"_index":488,"title":{},"body":{"classes/CustomException.html":{},"coverage.html":{}}}],["src/common/exception",{"_index":499,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{},"coverage.html":{}}}],["src/common/transform",{"_index":585,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/common/validationpipe/validationpipeoptions.interface.ts",{"_index":852,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{},"coverage.html":{}}}],["src/course/course.controller.ts",{"_index":379,"title":{},"body":{"controllers/CourseController.html":{},"coverage.html":{}}}],["src/course/course.controller.ts:111",{"_index":407,"title":{},"body":{"controllers/CourseController.html":{}}}],["src/course/course.controller.ts:27",{"_index":391,"title":{},"body":{"controllers/CourseController.html":{}}}],["src/course/course.controller.ts:39",{"_index":397,"title":{},"body":{"controllers/CourseController.html":{}}}],["src/course/course.controller.ts:57",{"_index":404,"title":{},"body":{"controllers/CourseController.html":{}}}],["src/course/course.controller.ts:75",{"_index":400,"title":{},"body":{"controllers/CourseController.html":{}}}],["src/course/course.controller.ts:92",{"_index":394,"title":{},"body":{"controllers/CourseController.html":{}}}],["src/course/course.entity",{"_index":656,"title":{},"body":{"entities/User.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{}}}],["src/course/course.entity.ts",{"_index":351,"title":{},"body":{"entities/Course.html":{},"coverage.html":{}}}],["src/course/course.entity.ts:13",{"_index":367,"title":{},"body":{"entities/Course.html":{}}}],["src/course/course.entity.ts:18",{"_index":365,"title":{},"body":{"entities/Course.html":{}}}],["src/course/course.entity.ts:23",{"_index":370,"title":{},"body":{"entities/Course.html":{}}}],["src/course/course.entity.ts:28",{"_index":359,"title":{},"body":{"entities/Course.html":{}}}],["src/course/course.entity.ts:33",{"_index":361,"title":{},"body":{"entities/Course.html":{}}}],["src/course/course.entity.ts:38",{"_index":363,"title":{},"body":{"entities/Course.html":{}}}],["src/course/course.entity.ts:47",{"_index":374,"title":{},"body":{"entities/Course.html":{}}}],["src/course/course.module.ts",{"_index":460,"title":{},"body":{"modules/CourseModule.html":{}}}],["src/course/course.repository",{"_index":773,"title":{},"body":{"modules/UserModule.html":{}}}],["src/course/course.repository.ts",{"_index":469,"title":{},"body":{"classes/CourseRepository.html":{},"coverage.html":{}}}],["src/course/course.service.ts",{"_index":471,"title":{},"body":{"injectables/CourseService.html":{},"coverage.html":{}}}],["src/course/course.service.ts:102",{"_index":476,"title":{},"body":{"injectables/CourseService.html":{}}}],["src/course/course.service.ts:124",{"_index":481,"title":{},"body":{"injectables/CourseService.html":{}}}],["src/course/course.service.ts:21",{"_index":475,"title":{},"body":{"injectables/CourseService.html":{}}}],["src/course/course.service.ts:42",{"_index":477,"title":{},"body":{"injectables/CourseService.html":{}}}],["src/course/course.service.ts:62",{"_index":479,"title":{},"body":{"injectables/CourseService.html":{}}}],["src/course/course.service.ts:82",{"_index":478,"title":{},"body":{"injectables/CourseService.html":{}}}],["src/course/course.service.ts:9",{"_index":473,"title":{},"body":{"injectables/CourseService.html":{}}}],["src/course/dto/course.dto.ts",{"_index":434,"title":{},"body":{"classes/CourseDto.html":{},"coverage.html":{}}}],["src/course/dto/course.dto.ts:14",{"_index":451,"title":{},"body":{"classes/CourseDto.html":{}}}],["src/course/dto/course.dto.ts:25",{"_index":449,"title":{},"body":{"classes/CourseDto.html":{}}}],["src/course/dto/course.dto.ts:37",{"_index":452,"title":{},"body":{"classes/CourseDto.html":{}}}],["src/course/dto/course.dto.ts:48",{"_index":437,"title":{},"body":{"classes/CourseDto.html":{}}}],["src/course/dto/course.dto.ts:59",{"_index":444,"title":{},"body":{"classes/CourseDto.html":{}}}],["src/course/dto/course.dto.ts:69",{"_index":446,"title":{},"body":{"classes/CourseDto.html":{}}}],["src/course/dto/course.dto.ts:73",{"_index":453,"title":{},"body":{"classes/CourseDto.html":{}}}],["src/main.ts",{"_index":871,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/user/dto/user.dto.ts",{"_index":735,"title":{},"body":{"classes/UserDto.html":{},"coverage.html":{}}}],["src/user/dto/user.dto.ts:15",{"_index":750,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/dto/user.dto.ts:24",{"_index":751,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/dto/user.dto.ts:32",{"_index":745,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/dto/user.dto.ts:41",{"_index":758,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/dto/user.dto.ts:49",{"_index":753,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/dto/user.dto.ts:53",{"_index":759,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/dto/user.dto.ts:62",{"_index":749,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/dto/user.dto.ts:71",{"_index":741,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/dto/user.dto.ts:75",{"_index":736,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/dto/user.dto.ts:79",{"_index":742,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/guards/jwt",{"_index":531,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/user/guards/roles.guard.ts",{"_index":603,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/user/guards/roles.guard.ts:11",{"_index":607,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/user/guards/roles.guard.ts:22",{"_index":610,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/user/jwt/jwt",{"_index":539,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/user/jwt/jwt.strategy.ts",{"_index":544,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/user/jwt/jwt.strategy.ts:11",{"_index":546,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/user/jwt/jwt.strategy.ts:30",{"_index":549,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/user/login.dto.ts",{"_index":572,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/user/login.dto.ts:16",{"_index":580,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/user/login.dto.ts:23",{"_index":582,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/user/role/roles.decorator.ts",{"_index":875,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/rolse/role.ts",{"_index":917,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/user/user.controller.ts",{"_index":664,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:108",{"_index":702,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:128",{"_index":682,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:28",{"_index":698,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:40",{"_index":692,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:52",{"_index":678,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:71",{"_index":685,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:88",{"_index":674,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.entity",{"_index":64,"title":{},"body":{"entities/Address.html":{},"classes/AddressDto.html":{},"modules/AddressModule.html":{},"entities/Course.html":{},"classes/CourseDto.html":{},"modules/CourseModule.html":{}}}],["src/user/user.entity.ts",{"_index":629,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/user.entity.ts:17",{"_index":644,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:22",{"_index":645,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:27",{"_index":641,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:32",{"_index":647,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:37",{"_index":646,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:42",{"_index":653,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:47",{"_index":643,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:52",{"_index":636,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:60",{"_index":635,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:69",{"_index":639,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.module.ts",{"_index":768,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.repository",{"_index":267,"title":{},"body":{"modules/AddressModule.html":{},"modules/CourseModule.html":{}}}],["src/user/user.repository.ts",{"_index":788,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{}}}],["src/user/user.service.ts",{"_index":793,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:112",{"_index":801,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:13",{"_index":795,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:132",{"_index":797,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:155",{"_index":805,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:179",{"_index":800,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:25",{"_index":804,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:60",{"_index":803,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:92",{"_index":798,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":941,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":944,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":946,"title":{},"body":{"index.html":{}}}],["started",{"_index":924,"title":{"index.html":{}},"body":{}}],["starter",{"_index":935,"title":{},"body":{"index.html":{}}}],["starting",{"_index":445,"title":{},"body":{"classes/CourseDto.html":{}}}],["state",{"_index":23,"title":{},"body":{"entities/Address.html":{},"classes/AddressDto.html":{}}}],["state:string",{"_index":80,"title":{},"body":{"entities/Address.html":{}}}],["statements",{"_index":864,"title":{},"body":{"coverage.html":{}}}],["station",{"_index":49,"title":{},"body":{"entities/Address.html":{},"classes/AddressDto.html":{}}}],["status",{"_index":118,"title":{},"body":{"controllers/AddressController.html":{},"controllers/CourseController.html":{},"classes/ExceptionExceptionFilter.html":{},"controllers/UserController.html":{}}}],["statuscode",{"_index":523,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["stay",{"_index":967,"title":{},"body":{"index.html":{}}}],["store",{"_index":511,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["strategy",{"_index":553,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":28,"title":{},"body":{"entities/Address.html":{},"controllers/AddressController.html":{},"classes/AddressDto.html":{},"injectables/AddressService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/Course.html":{},"controllers/CourseController.html":{},"classes/CourseDto.html":{},"injectables/CourseService.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string'})@minlength(2",{"_index":200,"title":{},"body":{"classes/AddressDto.html":{},"classes/CourseDto.html":{}}}],["string'})@minlength(3",{"_index":214,"title":{},"body":{"classes/AddressDto.html":{},"classes/UserDto.html":{}}}],["string'})@minlength(5",{"_index":746,"title":{},"body":{"classes/UserDto.html":{}}}],["subject",{"_index":358,"title":{},"body":{"entities/Course.html":{},"controllers/CourseController.html":{},"classes/CourseDto.html":{},"injectables/CourseService.html":{}}}],["subjectb",{"_index":371,"title":{},"body":{"entities/Course.html":{}}}],["succcess",{"_index":480,"title":{},"body":{"injectables/CourseService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["success",{"_index":127,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/CourseController.html":{},"injectables/CourseService.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["successfully",{"_index":117,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{},"controllers/CourseController.html":{},"injectables/CourseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["successfully,please",{"_index":822,"title":{},"body":{"injectables/UserService.html":{}}}],["successs",{"_index":401,"title":{},"body":{"controllers/CourseController.html":{}}}],["super",{"_index":496,"title":{},"body":{"classes/CustomException.html":{},"injectables/JwtStrategy.html":{}}}],["super(message",{"_index":497,"title":{},"body":{"classes/CustomException.html":{}}}],["support",{"_index":960,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":977,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":897,"title":{},"body":{"dependencies.html":{}}}],["switchtohttp",{"_index":510,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["t",{"_index":587,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["table",{"_index":10,"title":{},"body":{"entities/Address.html":{},"entities/User.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":878,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":949,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":952,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":951,"title":{},"body":{"index.html":{}}}],["tests",{"_index":948,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":958,"title":{},"body":{"index.html":{}}}],["this.addressrepo.delete(id",{"_index":318,"title":{},"body":{"injectables/AddressService.html":{}}}],["this.addressrepo.find",{"_index":315,"title":{},"body":{"injectables/AddressService.html":{}}}],["this.addressrepo.findone(id",{"_index":316,"title":{},"body":{"injectables/AddressService.html":{}}}],["this.addressrepo.save(address",{"_index":307,"title":{},"body":{"injectables/AddressService.html":{}}}],["this.addressrepo.update(id",{"_index":317,"title":{},"body":{"injectables/AddressService.html":{}}}],["this.addressservice.addaddress(address",{"_index":180,"title":{},"body":{"controllers/AddressController.html":{}}}],["this.addressservice.deleteaddressbyid(id",{"_index":192,"title":{},"body":{"controllers/AddressController.html":{}}}],["this.addressservice.findaddressbyid(id",{"_index":186,"title":{},"body":{"controllers/AddressController.html":{}}}],["this.addressservice.findaddressbyname(village",{"_index":195,"title":{},"body":{"controllers/AddressController.html":{}}}],["this.addressservice.findalladdress(address",{"_index":183,"title":{},"body":{"controllers/AddressController.html":{}}}],["this.addressservice.updateaddressbyid(id",{"_index":189,"title":{},"body":{"controllers/AddressController.html":{}}}],["this.appservice.gethello",{"_index":332,"title":{},"body":{"controllers/AppController.html":{}}}],["this.courserepo.delete(id",{"_index":485,"title":{},"body":{"injectables/CourseService.html":{}}}],["this.courserepo.find",{"_index":483,"title":{},"body":{"injectables/CourseService.html":{}}}],["this.courserepo.findone(id",{"_index":484,"title":{},"body":{"injectables/CourseService.html":{}}}],["this.courserepo.save(course",{"_index":482,"title":{},"body":{"injectables/CourseService.html":{}}}],["this.courserepo.update(id",{"_index":486,"title":{},"body":{"injectables/CourseService.html":{}}}],["this.courseservice.addcourse(course",{"_index":417,"title":{},"body":{"controllers/CourseController.html":{}}}],["this.courseservice.coursedeletebyid(id",{"_index":429,"title":{},"body":{"controllers/CourseController.html":{}}}],["this.courseservice.findallcourse(course",{"_index":420,"title":{},"body":{"controllers/CourseController.html":{}}}],["this.courseservice.findcoursebyid(id",{"_index":426,"title":{},"body":{"controllers/CourseController.html":{}}}],["this.courseservice.findcoursebyname(subject",{"_index":423,"title":{},"body":{"controllers/CourseController.html":{}}}],["this.courseservice.updatecoursebyid(id,course",{"_index":433,"title":{},"body":{"controllers/CourseController.html":{}}}],["this.jwtservice.sign(payload",{"_index":835,"title":{},"body":{"injectables/UserService.html":{}}}],["this.reflectore.getallandoverride(roles_key",{"_index":620,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.userrepo.delete(id",{"_index":850,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo.find",{"_index":845,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo.findone(id",{"_index":846,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo.findoneorfail({emailid",{"_index":567,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["this.userrepo.save",{"_index":818,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo.save(user",{"_index":820,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo.update(id",{"_index":848,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.finduserbyname(name",{"_index":726,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.finduserlist(user",{"_index":719,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.userdeletebyid(id",{"_index":734,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.userfindbyid(id",{"_index":723,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.userlogin(userlogin",{"_index":716,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.userregister(user",{"_index":712,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.userupdate(id",{"_index":729,"title":{},"body":{"controllers/UserController.html":{}}}],["three",{"_index":204,"title":{},"body":{"classes/AddressDto.html":{},"classes/UserDto.html":{}}}],["throw",{"_index":309,"title":{},"body":{"injectables/AddressService.html":{},"injectables/CourseService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["time",{"_index":528,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["token",{"_index":834,"title":{},"body":{"injectables/UserService.html":{}}}],["token,status:'login",{"_index":837,"title":{},"body":{"injectables/UserService.html":{}}}],["topsecret51",{"_index":782,"title":{},"body":{"modules/UserModule.html":{}}}],["touch",{"_index":968,"title":{},"body":{"index.html":{}}}],["transform",{"_index":856,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{}}}],["transformer",{"_index":893,"title":{},"body":{"dependencies.html":{}}}],["transforminterceptor",{"_index":594,"title":{"injectables/TransformInterceptor.html":{}},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["true",{"_index":114,"title":{},"body":{"controllers/AddressController.html":{},"controllers/CourseController.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["true})@apiokresponse({description",{"_index":131,"title":{},"body":{"controllers/AddressController.html":{},"controllers/CourseController.html":{},"controllers/UserController.html":{}}}],["try",{"_index":304,"title":{},"body":{"injectables/AddressService.html":{},"injectables/CourseService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["twitter",{"_index":973,"title":{},"body":{"index.html":{}}}],["two",{"_index":448,"title":{},"body":{"classes/CourseDto.html":{}}}],["type",{"_index":26,"title":{},"body":{"entities/Address.html":{},"controllers/AddressController.html":{},"classes/AddressDto.html":{},"injectables/AddressService.html":{},"entities/Course.html":{},"controllers/CourseController.html":{},"classes/CourseDto.html":{},"injectables/CourseService.html":{},"classes/ExceptionExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":66,"title":{},"body":{"entities/Address.html":{},"classes/AddressRepository.html":{},"entities/Course.html":{},"classes/CourseRepository.html":{},"entities/User.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":264,"title":{},"body":{"modules/AddressModule.html":{},"modules/AppModule.html":{},"modules/CourseModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([user,userrepository,address,addressrepository,course,courserepository",{"_index":786,"title":{},"body":{"modules/UserModule.html":{}}}],["typescript",{"_index":934,"title":{},"body":{"index.html":{}}}],["ui",{"_index":911,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":807,"title":{},"body":{"injectables/UserService.html":{}}}],["unauthorizedexception('invalid",{"_index":841,"title":{},"body":{"injectables/UserService.html":{}}}],["undefined",{"_index":652,"title":{},"body":{"entities/User.html":{}}}],["undefined})@apiinternalservererrorresponse({description",{"_index":119,"title":{},"body":{"controllers/AddressController.html":{},"controllers/CourseController.html":{},"controllers/UserController.html":{}}}],["undefined})@apinotfoundresponse({description",{"_index":133,"title":{},"body":{"controllers/AddressController.html":{},"controllers/CourseController.html":{},"controllers/UserController.html":{}}}],["undefined})@delete('/coursedeletebyid/:id",{"_index":393,"title":{},"body":{"controllers/CourseController.html":{}}}],["undefined})@delete('/deleteaddressbyid/:id",{"_index":134,"title":{},"body":{"controllers/AddressController.html":{}}}],["undefined})@delete('/userdeletebyid/:id",{"_index":681,"title":{},"body":{"controllers/UserController.html":{}}}],["undefined})@get('/findaddressbyid/:id",{"_index":138,"title":{},"body":{"controllers/AddressController.html":{}}}],["undefined})@get('/findaddressbyname/:village",{"_index":141,"title":{},"body":{"controllers/AddressController.html":{}}}],["undefined})@get('/findalladdress",{"_index":147,"title":{},"body":{"controllers/AddressController.html":{}}}],["undefined})@get('/findallcourse",{"_index":396,"title":{},"body":{"controllers/CourseController.html":{}}}],["undefined})@get('/findcoursebyid/:id",{"_index":399,"title":{},"body":{"controllers/CourseController.html":{}}}],["undefined})@get('/findcoursebyname/:subject",{"_index":403,"title":{},"body":{"controllers/CourseController.html":{}}}],["undefined})@get('/finduserbyname/:name",{"_index":673,"title":{},"body":{"controllers/UserController.html":{}}}],["undefined})@get('/finduserlist",{"_index":677,"title":{},"body":{"controllers/UserController.html":{}}}],["undefined})@get('/userfindbyid/:id",{"_index":684,"title":{},"body":{"controllers/UserController.html":{}}}],["undefined})@post('/addaddress",{"_index":120,"title":{},"body":{"controllers/AddressController.html":{}}}],["undefined})@post('/addcourse",{"_index":390,"title":{},"body":{"controllers/CourseController.html":{}}}],["undefined})@post('/register",{"_index":697,"title":{},"body":{"controllers/UserController.html":{}}}],["undefined})@post('/userlogin",{"_index":691,"title":{},"body":{"controllers/UserController.html":{}}}],["undefined})@put('/updateaddressbyid/:id",{"_index":151,"title":{},"body":{"controllers/AddressController.html":{}}}],["undefined})@put('/updatecoursebyid/:id",{"_index":406,"title":{},"body":{"controllers/CourseController.html":{}}}],["undefined})@put('/userupdatebyid/:id",{"_index":701,"title":{},"body":{"controllers/UserController.html":{}}}],["unique",{"_index":642,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":947,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":296,"title":{},"body":{"injectables/AddressService.html":{},"injectables/CourseService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["update",{"_index":408,"title":{},"body":{"controllers/CourseController.html":{},"injectables/CourseService.html":{},"injectables/UserService.html":{}}}],["updateaddressbyid",{"_index":109,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{}}}],["updateaddressbyid(@param('id",{"_index":188,"title":{},"body":{"controllers/AddressController.html":{}}}],["updateaddressbyid(id",{"_index":149,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{}}}],["updatecoursebyid",{"_index":385,"title":{},"body":{"controllers/CourseController.html":{},"injectables/CourseService.html":{}}}],["updatecoursebyid(@param('id')id:number",{"_index":431,"title":{},"body":{"controllers/CourseController.html":{}}}],["updatecoursebyid(id",{"_index":405,"title":{},"body":{"controllers/CourseController.html":{},"injectables/CourseService.html":{}}}],["updated",{"_index":150,"title":{},"body":{"controllers/AddressController.html":{},"injectables/AddressService.html":{},"controllers/CourseController.html":{},"injectables/CourseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["url",{"_index":526,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["usefilters(exceptionexceptionfilter",{"_index":720,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(jwtauthguard",{"_index":717,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(rolesguard",{"_index":731,"title":{},"body":{"controllers/UserController.html":{}}}],["user",{"_index":24,"title":{"entities/User.html":{}},"body":{"entities/Address.html":{},"classes/AddressDto.html":{},"modules/AddressModule.html":{},"entities/Course.html":{},"classes/CourseDto.html":{},"modules/CourseModule.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user.address",{"_index":84,"title":{},"body":{"entities/Address.html":{}}}],["user.address)@joincolumn",{"_index":55,"title":{},"body":{"entities/Address.html":{}}}],["user.controller",{"_index":776,"title":{},"body":{"modules/UserModule.html":{}}}],["user.course",{"_index":373,"title":{},"body":{"entities/Course.html":{}}}],["user.entity",{"_index":777,"title":{},"body":{"modules/UserModule.html":{},"classes/UserRepository.html":{}}}],["user.password=hashedpassword",{"_index":819,"title":{},"body":{"injectables/UserService.html":{}}}],["user.repository",{"_index":556,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.role?.includes(role",{"_index":626,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.service",{"_index":707,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.module",{"_index":344,"title":{},"body":{"modules/AppModule.html":{}}}],["usercontroller",{"_index":663,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdeletebyid",{"_index":667,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userdeletebyid(@param('id",{"_index":733,"title":{},"body":{"controllers/UserController.html":{}}}],["userdeletebyid(id",{"_index":680,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userdto",{"_index":676,"title":{"classes/UserDto.html":{}},"body":{"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userdto})@apicreatedresponse({description",{"_index":695,"title":{},"body":{"controllers/UserController.html":{}}}],["userfindbyid",{"_index":668,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userfindbyid(@param('id",{"_index":722,"title":{},"body":{"controllers/UserController.html":{}}}],["userfindbyid(id",{"_index":683,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userid",{"_index":579,"title":{},"body":{"classes/LoginDto.html":{}}}],["userinfo",{"_index":829,"title":{},"body":{"injectables/UserService.html":{}}}],["userinfo.emailid",{"_index":833,"title":{},"body":{"injectables/UserService.html":{}}}],["userinfo.password",{"_index":832,"title":{},"body":{"injectables/UserService.html":{}}}],["userlogin",{"_index":669,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userlogin(@body",{"_index":714,"title":{},"body":{"controllers/UserController.html":{}}}],["userlogin(userlogin",{"_index":689,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userlogin.emailid",{"_index":830,"title":{},"body":{"injectables/UserService.html":{}}}],["usermodule",{"_index":338,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["usermodule,addressmodule,coursemodule,typeormmodule.forroot",{"_index":345,"title":{},"body":{"modules/AppModule.html":{}}}],["userregister",{"_index":670,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userregister(@body",{"_index":711,"title":{},"body":{"controllers/UserController.html":{}}}],["userregister(user",{"_index":694,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userrepo",{"_index":547,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["userrepository",{"_index":266,"title":{"classes/UserRepository.html":{}},"body":{"modules/AddressModule.html":{},"modules/CourseModule.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userservice",{"_index":706,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userupdate",{"_index":671,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userupdate(@param('id",{"_index":728,"title":{},"body":{"controllers/UserController.html":{}}}],["userupdate(id",{"_index":700,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userupdatebyid",{"_index":703,"title":{},"body":{"controllers/UserController.html":{}}}],["valid",{"_index":578,"title":{},"body":{"classes/LoginDto.html":{}}}],["validate",{"_index":210,"title":{},"body":{"classes/AddressDto.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["validate(payload",{"_index":548,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validated",{"_index":450,"title":{},"body":{"classes/CourseDto.html":{},"injectables/UserService.html":{}}}],["validating",{"_index":693,"title":{},"body":{"controllers/UserController.html":{}}}],["validation",{"_index":859,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{}}}],["validationerror",{"_index":857,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{}}}],["validationpipeoptions",{"_index":851,"title":{"interfaces/ValidationPipeOptions.html":{}},"body":{"interfaces/ValidationPipeOptions.html":{},"coverage.html":{}}}],["validator",{"_index":243,"title":{},"body":{"classes/AddressDto.html":{},"classes/CourseDto.html":{},"classes/LoginDto.html":{},"classes/UserDto.html":{},"interfaces/ValidationPipeOptions.html":{},"dependencies.html":{}}}],["validatoroptions",{"_index":853,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{}}}],["valideed",{"_index":438,"title":{},"body":{"classes/CourseDto.html":{}}}],["value",{"_index":919,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":876,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":983,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["village",{"_index":25,"title":{},"body":{"entities/Address.html":{},"controllers/AddressController.html":{},"classes/AddressDto.html":{},"injectables/AddressService.html":{}}}],["village:string",{"_index":74,"title":{},"body":{"entities/Address.html":{}}}],["villlage",{"_index":62,"title":{},"body":{"entities/Address.html":{},"classes/AddressDto.html":{}}}],["watch",{"_index":942,"title":{},"body":{"index.html":{}}}],["website",{"_index":971,"title":{},"body":{"index.html":{}}}],["world",{"_index":349,"title":{},"body":{"injectables/AppService.html":{}}}],["write",{"_index":283,"title":{},"body":{"injectables/AddressService.html":{},"injectables/UserService.html":{}}}],["year",{"_index":763,"title":{},"body":{"classes/UserDto.html":{}}}],["year'})@maxlength(3",{"_index":738,"title":{},"body":{"classes/UserDto.html":{}}}],["you'd",{"_index":963,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":259,"title":{},"body":{"modules/AddressModule.html":{},"modules/AppModule.html":{},"modules/CourseModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"entities/Address.html":{"url":"entities/Address.html","title":"entity - Address","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Address\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/address/address.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Address mapping database table and colume name\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                city\n                            \n                            \n                                country\n                            \n                            \n                                gali_number\n                            \n                            \n                                house_number\n                            \n                            \n                                id\n                            \n                            \n                                pin_code\n                            \n                            \n                                police_station\n                            \n                            \n                                post_office\n                            \n                            \n                                state\n                            \n                            \n                                user\n                            \n                            \n                                village\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/address.entity.ts:36\n                        \n                    \n\n            \n                \n                    city colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/address.entity.ts:56\n                        \n                    \n\n            \n                \n                    country colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gali_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/address.entity.ts:31\n                        \n                    \n\n            \n                \n                    gali number\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        house_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/address.entity.ts:26\n                        \n                    \n\n            \n                \n                     house number\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/address.entity.ts:16\n                        \n                    \n\n            \n                \n                    generating primary key\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pin_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/address.entity.ts:61\n                        \n                    \n\n            \n                \n                    pin code colume\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        police_station\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/address.entity.ts:46\n                        \n                    \n\n            \n                \n                    police station colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        post_office\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/address.entity.ts:41\n                        \n                    \n\n            \n                \n                    post office colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/address.entity.ts:51\n                        \n                    \n\n            \n                \n                    state colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user.address)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/address.entity.ts:74\n                        \n                    \n\n            \n                \n                    createing one to one relation bitween address and user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        village\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/address.entity.ts:21\n                        \n                    \n\n            \n                \n                    villlage colume name\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        \nimport { User } from \"src/user/user.entity\";\nimport { Column, Entity,JoinColumn,OneToOne, PrimaryGeneratedColumn } from \"typeorm\";\n/**\n * Address mapping database table and colume name\n * @author Md Nasir Hussain\n */\n@Entity()\nexport class Address\n{\n     \n    /**\n     * generating primary key\n     */\n    @PrimaryGeneratedColumn()\n    id:number\n    /**\n     * villlage colume name\n     */\n    @Column()\n     village:string;\n     /**\n      *  house number\n      */\n     @Column()\n    house_number:string;\n    /**\n     * gali number\n     */\n    @Column()\n    gali_number:string;\n    /**\n     * city colume name\n     */\n    @Column()\n    city:string;\n    /**\n     * post office colume name\n     */\n    @Column()\n    post_office:string;\n    /**\n     * police station colume name\n     */\n    @Column()\n    police_station:string;\n    /**\n     * state colume name\n     */\n    @Column()\n    state:string;\n    /**\n     * country colume name\n     */\n    @Column()\n    country:string;\n    /**\n     * pin code colume\n     */\n    @Column()\n    pin_code:number;\n      \n    /**\n     * createing one to one relation bitween address and user\n     */\n    @OneToOne(() => User, user => user.address) // specify inverse side as a second parameter\n    /**\n     * join colume bitween user and address\n     */\n    @JoinColumn()\n    /**\n     * creating object bitwwen user and address\n     */\n    user: User;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AddressController.html":{"url":"controllers/AddressController.html","title":"controller - AddressController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AddressController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/address/address.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                address\n            \n\n\n            \n                Description\n            \n            \n                address controler\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addAddress\n                            \n                            \n                                deleteAddressById\n                            \n                            \n                                findAddressById\n                            \n                            \n                                findAddressByName\n                            \n                            \n                                findAllAddress\n                            \n                            \n                                updateAddressById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addAddress\n                        \n                    \n                \n            \n            \n                \naddAddress(address: AddressDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({description: 'AddressDto', required: true, type: AddressDto})@ApiCreatedResponse({description: 'Address Inserted successfully', status: undefined})@ApiInternalServerErrorResponse({description: 'Address not inserted successfully', status: undefined})@Post('/addAddress')\n                \n            \n\n            \n                \n                    Defined in src/address/address.controller.ts:26\n                \n            \n\n\n            \n                \n                    addAddress\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    address\n                                    \n                                                AddressDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteAddressById\n                        \n                    \n                \n            \n            \n                \ndeleteAddressById(id: AddressDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiParam({name: 'id', description: 'name id', required: true})@ApiOkResponse({description: 'Address successfully deleted by id', status: undefined})@ApiInternalServerErrorResponse({description: 'Address not successfully deleted by id', status: undefined})@ApiNotFoundResponse({description: 'Address not successfully deleted by id', status: undefined})@Delete('/deleteAddressById/:id')\n                \n            \n\n            \n                \n                    Defined in src/address/address.controller.ts:89\n                \n            \n\n\n            \n                \n                    deleteAddressById\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                AddressDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAddressById\n                        \n                    \n                \n            \n            \n                \nfindAddressById(id: AddressDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiParam({name: 'id', description: 'name id', required: true})@ApiOkResponse({description: 'Address found by id successfully', status: undefined})@ApiInternalServerErrorResponse({description: 'Address not by id successfully', status: undefined})@ApiNotFoundResponse({description: 'Address not found by id successfully', status: undefined})@Get('/findAddressById/:id')\n                \n            \n\n            \n                \n                    Defined in src/address/address.controller.ts:54\n                \n            \n\n\n            \n                \n                    findAddressById\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                AddressDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAddressByName\n                        \n                    \n                \n            \n            \n                \nfindAddressByName(village: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiParam({name: 'village', description: 'name village', required: true})@ApiOkResponse({description: 'Address found by name', status: undefined})@ApiInternalServerErrorResponse({description: 'Address not by name', status: undefined})@ApiNotFoundResponse({description: 'Address not found by name', status: undefined})@Get('/findAddressByName/:village')\n                \n            \n\n            \n                \n                    Defined in src/address/address.controller.ts:106\n                \n            \n\n\n            \n                \n                    findAddressByName\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    village\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllAddress\n                        \n                    \n                \n            \n            \n                \nfindAllAddress(address: AddressDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'Address list founded', status: undefined})@ApiInternalServerErrorResponse({description: 'Address not found', status: undefined})@Get('/findAllAddress')\n                \n            \n\n            \n                \n                    Defined in src/address/address.controller.ts:37\n                \n            \n\n\n            \n                \n                    findAllAddress\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    address\n                                    \n                                                AddressDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateAddressById\n                        \n                    \n                \n            \n            \n                \nupdateAddressById(id: number, address: AddressDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiParam({name: 'id', description: 'name id', required: true})@ApiOkResponse({description: 'Address updated successfully', status: undefined})@ApiInternalServerErrorResponse({description: 'Address not updated successfully', status: undefined})@ApiNotFoundResponse({description: 'Address not updated successfully', status: undefined})@Put('/updateAddressById/:id')\n                \n            \n\n            \n                \n                    Defined in src/address/address.controller.ts:72\n                \n            \n\n\n            \n                \n                    updateAddressById\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                                \n                                    address\n                                    \n                                                AddressDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, HttpStatus, Param, Post, Put } from \"@nestjs/common\";\nimport { ApiBody, ApiCreatedResponse, ApiInternalServerErrorResponse, ApiNotFoundResponse, ApiOkResponse, ApiParam, ApiTags } from \"@nestjs/swagger\";\nimport { AddressService } from \"./address.service\";\nimport { AddressDto } from \"./dto/address.dto\";\n/**\n * address controler\n * @author Md Nasir Hussain\n */\n @ApiTags('Address')\n@Controller('address')\nexport class AddressController {\n  /**\n   * address service injectable\n   * @param addressService \n   */\n  constructor(private addressService: AddressService) { }\n  /**\n   * addAddress\n   * @param address path\n   * @returns if success or failure\n   */\n  @ApiBody({ description: 'AddressDto', required: true, type: AddressDto })\n  @ApiCreatedResponse({ description: 'Address Inserted successfully', status: HttpStatus.CREATED })\n  @ApiInternalServerErrorResponse({ description: 'Address not inserted successfully', status: HttpStatus.INTERNAL_SERVER_ERROR })\n  @Post('/addAddress')\n  addAddress(@Body() address: AddressDto): Promise {\n    return this.addressService.addAddress(address)\n  }\n  /**\n   * findAllAddress\n   * @param address path\n   * @returns if success or failure\n   */\n  @ApiOkResponse({ description: 'Address list founded', status: HttpStatus.OK })\n  @ApiInternalServerErrorResponse({ description: \"Address not found\", status: HttpStatus.INTERNAL_SERVER_ERROR })\n  @Get('/findAllAddress')\n  findAllAddress(address: AddressDto): Promise {\n    return this.addressService.findAllAddress(address);\n  }\n  /**\n   * findAddressById\n   * @param id path\n   * @returns if success or failure\n   */\n  @ApiParam({\n    name: 'id',\n    description: 'name id',\n    required: true\n  })\n  @ApiOkResponse({ description: 'Address found by id successfully', status: HttpStatus.OK })\n  @ApiInternalServerErrorResponse({ description: 'Address not by id successfully', status: HttpStatus.INTERNAL_SERVER_ERROR })\n  @ApiNotFoundResponse({ description: 'Address not found by id successfully', status: HttpStatus.NOT_FOUND })\n  @Get('/findAddressById/:id')\n  findAddressById(id: AddressDto) {\n    return this.addressService.findAddressById(id);\n  }\n  /**\n   * updateAddressById\n   * @param id path\n   * @param address path\n   * @returns if success or failure\n   */\n  @ApiParam({\n    name: 'id',\n    description: 'name id',\n    required: true\n  })\n  @ApiOkResponse({ description: 'Address updated successfully', status: HttpStatus.OK })\n  @ApiInternalServerErrorResponse({ description: 'Address not updated successfully', status: HttpStatus.INTERNAL_SERVER_ERROR })\n  @ApiNotFoundResponse({ description: 'Address not updated successfully', status: HttpStatus.NOT_FOUND })\n  @Put('/updateAddressById/:id')\n  updateAddressById(@Param('id') id: number, @Body() address: AddressDto): Promise {\n    return this.addressService.updateAddressById(id, address);\n  }\n  /**\n   * deleteAddressById\n   * @param id path\n   * @returns if success or failure\n   */\n  @ApiParam({\n    name: 'id',\n    description: 'name id',\n    required: true\n  })\n  @ApiOkResponse({ description: 'Address successfully deleted by id', status: HttpStatus.OK })\n  @ApiInternalServerErrorResponse({ description: 'Address not successfully deleted by id', status: HttpStatus.INTERNAL_SERVER_ERROR })\n  @ApiNotFoundResponse({ description: 'Address not successfully deleted by id', status: HttpStatus.NOT_FOUND })\n  @Delete('/deleteAddressById/:id')\n  deleteAddressById(@Param('id') id: AddressDto) {\n    return this.addressService.deleteAddressById(id)\n  }\n  /**\n   * findAddressByName\n   * @param village path\n   * @returns if success or failure\n   */\n  @ApiParam({\n    name: 'village',\n    description: 'name village',\n    required: true\n  })\n  @ApiOkResponse({ description: 'Address found by name', status: HttpStatus.OK })\n  @ApiInternalServerErrorResponse({ description: 'Address not by name', status: HttpStatus.INTERNAL_SERVER_ERROR })\n  @ApiNotFoundResponse({ description: 'Address not found by name', status: HttpStatus.NOT_FOUND })\n  @Get('/findAddressByName/:village')\n  findAddressByName(@Param('village') village: string): Promise {\n    return this.addressService.findAddressByName(village);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddressDto.html":{"url":"classes/AddressDto.html","title":"class - AddressDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddressDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/address/dto/address.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                AddressDto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                city\n                            \n                            \n                                country\n                            \n                            \n                                gali_number\n                            \n                            \n                                house_number\n                            \n                            \n                                id\n                            \n                            \n                                pin_code\n                            \n                            \n                                police_station\n                            \n                            \n                                post_office\n                            \n                            \n                                state\n                            \n                            \n                                user\n                            \n                            \n                                village\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'City name can not be empty'})@IsString({message: 'City name should be string'})@MinLength(2, {message: 'City length minimum three leter'})@MaxLength(50, {message: 'City length should be maximum 50 leters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/dto/address.dto.ts:53\n                        \n                    \n\n            \n                \n                    address city colume name\nand also validate the colume name\nadd Api property\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Country name can not be empty'})@IsString({message: 'Country name should be string'})@MinLength(3, {message: 'Country length minimum three leter'})@MaxLength(100, {message: 'Country length should be maximum 100 leters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/dto/address.dto.ts:97\n                        \n                    \n\n            \n                \n                    address country colume name\nand also validate the colume name\nadd Api property\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gali_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Gali number can not be empty'})@IsString({message: 'Gali number should be number'})@MinLength(1, {message: 'Gali number minimum one digits'})@MaxLength(10, {message: 'Gali number should be 10 digits'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/dto/address.dto.ts:42\n                        \n                    \n\n            \n                \n                    address gali number colume name\nand also validate the colume name\nadd Api property\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        house_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'House number can not be empty'})@MinLength(1, {message: 'House number minimum one digits'})@MaxLength(10, {message: 'House number should be maximum 10 dogits'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/dto/address.dto.ts:31\n                        \n                    \n\n            \n                \n                    address house number colume name\nand also validate the colume name\nadd Api property\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/address/dto/address.dto.ts:12\n                        \n                    \n\n            \n                \n                    address id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pin_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Pincode name can not be empty'})@IsNumber()@MinLength(6, {message: 'Pincode length minimum 6 digits '})@MaxLength(6, {message: 'Pincode length should be maximum 6 digits'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/dto/address.dto.ts:108\n                        \n                    \n\n            \n                \n                    address pincode colume name\nand also validate the colume name\nadd Api property\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        police_station\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Police station name can not be empty'})@IsString({message: 'Police station name should be string'})@MinLength(3, {message: 'Police station length minimum three leter'})@MaxLength(100, {message: 'Police station length should be maximum 100 leters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/dto/address.dto.ts:75\n                        \n                    \n\n            \n                \n                    address police station colume name\nand also validate the colume name\nadd Api property\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        post_office\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Post office name can not be empty'})@IsString({message: 'Post office name should be string'})@MinLength(3, {message: 'Post office length minimum three leter'})@MaxLength(100, {message: 'Post office length should be maximum 100 leters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/dto/address.dto.ts:64\n                        \n                    \n\n            \n                \n                    address post office colume name\nand also validate the colume name\nadd Api property\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'State name can not be empty'})@IsString({message: 'State name should be string'})@MinLength(3, {message: 'State length minimum three leter'})@MaxLength(100, {message: 'State length should be maximum 100 leters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/dto/address.dto.ts:86\n                        \n                    \n\n            \n                \n                    address state colume name\nand also validate the colume name\nadd Api property\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/address/dto/address.dto.ts:112\n                        \n                    \n\n            \n                \n                    Creating relation bitween user and address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        village\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Village name can not be empty'})@IsString({message: 'Village name should be string'})@MinLength(3, {message: 'Village name minimum three leter'})@MaxLength(100, {message: 'Villlage name should be maximum 100 leters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/dto/address.dto.ts:21\n                        \n                    \n\n            \n                \n                    address village colume name\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNotEmpty, IsNumber, IsString, MaxLength, MinLength } from \"class-validator\";\nimport { User } from \"src/user/user.entity\";\n/**\n * AddressDto\n * @author Md Nasir Hussain\n */\nexport class AddressDto {\n    /**\n     * address id\n     */\n    id: number\n    /**\n     * address village colume name\n     */\n    @ApiProperty()\n    @IsNotEmpty({ message: \"Village name can not be empty\" })\n    @IsString({ message: \"Village name should be string\" })\n    @MinLength(3, { message: \"Village name minimum three leter\" })\n    @MaxLength(100, { message: \"Villlage name should be maximum 100 leters\" })\n    village: string;\n    /**\n     * address house number colume name\n     * and also validate the colume name\n     * add Api property\n     */\n    @ApiProperty()\n    @IsNotEmpty({ message: \"House number can not be empty\" })\n    @MinLength(1, { message: \"House number minimum one digits\" })\n    @MaxLength(10, { message: \"House number should be maximum 10 dogits\" })\n    house_number: string;\n    /**\n     * address gali number colume name\n     * and also validate the colume name\n     * add Api property\n     */\n    @ApiProperty()\n    @IsNotEmpty({ message: \"Gali number can not be empty\" })\n    @IsString({ message: \"Gali number should be number\" })\n    @MinLength(1, { message: \"Gali number minimum one digits\" })\n    @MaxLength(10, { message: \"Gali number should be 10 digits\" })\n    gali_number: string;\n    /**\n     * address city colume name\n     * and also validate the colume name\n     * add Api property\n     */\n    @ApiProperty()\n    @IsNotEmpty({ message: \"City name can not be empty\" })\n    @IsString({ message: \"City name should be string\" })\n    @MinLength(2, { message: \"City length minimum three leter\" })\n    @MaxLength(50, { message: \"City length should be maximum 50 leters\" })\n    city: string;\n    /**\n     * address post office colume name\n     * and also validate the colume name\n     * add Api property\n     */\n    @ApiProperty()\n    @IsNotEmpty({ message: \"Post office name can not be empty\" })\n    @IsString({ message: \"Post office name should be string\" })\n    @MinLength(3, { message: \"Post office length minimum three leter\" })\n    @MaxLength(100, { message: \"Post office length should be maximum 100 leters\" })\n    post_office: string;\n    /**\n     * address police station colume name\n     * and also validate the colume name\n     * add Api property\n     */\n    @ApiProperty()\n    @IsNotEmpty({ message: \"Police station name can not be empty\" })\n    @IsString({ message: \"Police station name should be string\" })\n    @MinLength(3, { message: \"Police station length minimum three leter\" })\n    @MaxLength(100, { message: \"Police station length should be maximum 100 leters\" })\n    police_station: string;\n    /**\n     * address state colume name\n     * and also validate the colume name\n     * add Api property\n     */\n    @ApiProperty()\n    @IsNotEmpty({ message: \"State name can not be empty\" })\n    @IsString({ message: \"State name should be string\" })\n    @MinLength(3, { message: \"State length minimum three leter\" })\n    @MaxLength(100, { message: \"State length should be maximum 100 leters\" })\n    state: string;\n    /**\n     * address country colume name\n    * and also validate the colume name\n     * add Api property\n     */\n    @ApiProperty()\n    @IsNotEmpty({ message: \"Country name can not be empty\" })\n    @IsString({ message: \"Country name should be string\" })\n    @MinLength(3, { message: \"Country length minimum three leter\" })\n    @MaxLength(100, { message: \"Country length should be maximum 100 leters\" })\n    country: string;\n    /**\n     * address pincode colume name\n     * and also validate the colume name\n     * add Api property\n     */\n    @ApiProperty()\n    @IsNotEmpty({ message: \"Pincode name can not be empty\" })\n    @IsNumber()\n    @MinLength(6, { message: \"Pincode length minimum 6 digits \" })\n    @MaxLength(6, { message: \"Pincode length should be maximum 6 digits\" })\n    pin_code: number;\n    /**\n     * Creating relation bitween user and address\n     */\n    user: User;\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AddressModule.html":{"url":"modules/AddressModule.html","title":"module - AddressModule","body":"\n                   \n\n\n\n\n    Modules\n    AddressModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AddressModule\n\n\n\ncluster_AddressModule_providers\n\n\n\n\nAddressService\n\nAddressService\n\n\n\nAddressModule\n\nAddressModule\n\nAddressModule -->\n\nAddressService->AddressModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/address/address.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            address module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AddressService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AddressController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { User } from \"src/user/user.entity\";\nimport { UserRepository } from \"src/user/user.repository\";\nimport { AddressController } from \"./address.controller\";\nimport { Address } from \"./address.entity\";\nimport { AddressRepository } from \"./address.repository\";\nimport { AddressService } from \"./address.service\";\n/**\n * address module\n * @author Md Nasir Hussain\n */\n@Module({\n    imports:[TypeOrmModule.forFeature([Address,AddressRepository,User,UserRepository])],\n    exports:[],\n    providers:[AddressService],\n    controllers:[AddressController],\n})\n/**\n * address module\n */\nexport class AddressModule{\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddressRepository.html":{"url":"classes/AddressRepository.html","title":"class - AddressRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddressRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/address/address.repository.ts\n        \n\n\n            \n                Description\n            \n            \n                address repository\n\n            \n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from \"typeorm\";\nimport { Address } from \"./address.entity\";\n/**\n * address repository\n * @author Md Nasir Hussain\n */\n@EntityRepository(Address)\nexport class AddressRepository extends Repository{}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AddressService.html":{"url":"injectables/AddressService.html","title":"injectable - AddressService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AddressService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/address/address.service.ts\n        \n\n\n            \n                Description\n            \n            \n                address service, we write business logic\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addAddress\n                            \n                            \n                                    Async\n                                deleteAddressById\n                            \n                            \n                                    Async\n                                findAddressById\n                            \n                            \n                                    Async\n                                findAddressByName\n                            \n                            \n                                    Async\n                                findAllAddress\n                            \n                            \n                                    Async\n                                updateAddressById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(addressRepo: AddressRepository)\n                    \n                \n                        \n                            \n                                Defined in src/address/address.service.ts:9\n                            \n                        \n\n                \n                    \n                            servise repo injectable\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        addressRepo\n                                                  \n                                                        \n                                                                        AddressRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addAddress\n                        \n                    \n                \n            \n            \n                \n                    \n                    addAddress(address: AddressDto)\n                \n            \n\n\n            \n                \n                    Defined in src/address/address.service.ts:20\n                \n            \n\n\n            \n                \n                    addAddress\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    address\n                                    \n                                                AddressDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteAddressById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAddressById(id: AddressDto)\n                \n            \n\n\n            \n                \n                    Defined in src/address/address.service.ts:105\n                \n            \n\n\n            \n                \n                    addresss deleted by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                AddressDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAddressById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAddressById(id: AddressDto)\n                \n            \n\n\n            \n                \n                    Defined in src/address/address.service.ts:63\n                \n            \n\n\n            \n                \n                    findAddressById\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                AddressDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAddressByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAddressByName(village: string)\n                \n            \n\n\n            \n                \n                    Defined in src/address/address.service.ts:126\n                \n            \n\n\n            \n                \n                    find address by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    village\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllAddress\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllAddress(address: AddressDto)\n                \n            \n\n\n            \n                \n                    Defined in src/address/address.service.ts:42\n                \n            \n\n\n            \n                \n                    findAllAddress\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    address\n                                    \n                                                AddressDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateAddressById\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAddressById(id: number, address: AddressDto)\n                \n            \n\n\n            \n                \n                    Defined in src/address/address.service.ts:84\n                \n            \n\n\n            \n                \n                    updateAddressById\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                                \n                                    address\n                                    \n                                                AddressDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, Injectable, InternalServerErrorException } from \"@nestjs/common\";\nimport { AddressRepository } from \"./address.repository\";\nimport { AddressDto } from \"./dto/address.dto\";\n/**\n * address service, we write business logic\n * @author Md Nasir Hussain\n */\n@Injectable()\nexport class AddressService {\n    /**\n     * servise repo injectable\n     * @param addressRepo \n     */\n    constructor(private addressRepo: AddressRepository) { }\n    /**\n     * addAddress\n     * @param address path \n     * @returns if success or failure\n     */\n    async addAddress(address: AddressDto): Promise {\n        try {\n            let response = await this.addressRepo.save(address)\n\n            if (response) {\n                const message: string = \"Address Inserted successfully\";\n                return message;\n            }\n            else {\n                const message: string = \"Address not inserted successfully\";\n                throw new InternalServerErrorException(message);\n            }\n        }\n        catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n    /**\n     * findAllAddress\n     * @param address path \n     * @returns if success or failure\n     */\n    async findAllAddress(address: AddressDto): Promise {\n        try {\n            let response = await this.addressRepo.find();\n            if (response) {\n\n                return response;\n            }\n            else {\n                const message: string = \"Address not found\";\n                throw new InternalServerErrorException(message);\n            }\n        }\n        catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n    /**\n     * findAddressById\n     * @param id path\n     * @returns if success or failure\n     */\n    async findAddressById(id: AddressDto) {\n        try {\n            let response = await this.addressRepo.findOne(id)\n            if (response) {\n                return response;\n            }\n            else {\n                const message: string = \"Address found by id successfully\";\n                throw new InternalServerErrorException(message);\n            }\n        }\n        catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n    /**\n     * updateAddressById\n     * @param id path\n     * @param address path\n     * @returns if success or failure\n     */\n    async updateAddressById(id: number, address: AddressDto): Promise {\n        try {\n            let response = await this.addressRepo.update(id, address);\n            if (response) {\n                const message: string = \"Address updated successfully\";\n                return message;\n            }\n            else {\n                const message: string = \"Address not updated successfully\";\n                throw new InternalServerErrorException(message);\n            }\n        }\n        catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n    /**\n     * addresss deleted by id\n     * @param id path\n     * @returns if success or failure\n     */\n    async deleteAddressById(id: AddressDto) {\n        try {\n            let response = await this.addressRepo.delete(id);\n            if (response.affected > 0) {\n                const message: string = \"Address  deleted successfully by this id \" + id;\n                return message;\n            }\n            else {\n                const message: string = \"Address not deleted by this id\";\n                throw new InternalServerErrorException(message);\n            }\n        }\n        catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n    /**\n     * find address by name\n     * @param village path\n     * @returns if success or failure\n     */\n    async findAddressByName(village: string): Promise {\n        try {\n            let response = await this.addressRepo.find({ village: village });\n            if (response) {\n                return response;\n            }\n            else {\n                const message: string = \"Address not by name\";\n                throw new InternalServerErrorException(message);\n            }\n        }\n        catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                app controlller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:19\n                \n            \n\n\n            \n                \n                    simpal  app controller method\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n/**\n * app controlller\n * @author Md Nasir Hussain\n */\n@Controller()\nexport class AppController {\n  /**\n   * injectable service \n   * @param appService \n   */\n  constructor(private readonly appService: AppService) {}\n/**\n *simpal  app controller method\n * @returns if success or failure\n */\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAddressModule\n\nAddressModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAddressModule->AppModule\n\n\n\n\n\nCourseModule\n\nCourseModule\n\nAppModule -->\n\nCourseModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            app module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AddressModule\n                        \n                        \n                            CourseModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AddressModule } from './address/address.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { CourseModule } from './course/course.module';\nimport { UserModule } from './user/user.module';\n/**\n * app module \n * @author Md Nasir Hussain\n */\n@Module({\n  imports: [UserModule,AddressModule,CourseModule,TypeOrmModule.forRoot()],\n  controllers: [AppController],\n  providers: [AppService],\n})\n/**\n * address module\n */\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                injectable app service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:12\n                \n            \n\n\n            \n                \n                    simpal method\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n/**\n * injectable app service\n * @author Md Nasir Hussain\n */\n@Injectable()\nexport class AppService {\n  /**\n   * simpal method\n   * @returns if success or failure\n   */\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Course.html":{"url":"entities/Course.html","title":"entity - Course","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Course\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/course/course.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                course mapping for data base and colume name\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                course_duration\n                            \n                            \n                                course_fees\n                            \n                            \n                                course_starting_date\n                            \n                            \n                                couser_name\n                            \n                            \n                                id\n                            \n                            \n                                subject\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        course_duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/course/course.entity.ts:28\n                        \n                    \n\n            \n                \n                    course duration colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        course_fees\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/course/course.entity.ts:33\n                        \n                    \n\n            \n                \n                    course colume fees name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        course_starting_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/course/course.entity.ts:38\n                        \n                    \n\n            \n                \n                    course colume date name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        couser_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/course/course.entity.ts:18\n                        \n                    \n\n            \n                \n                    couser colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/course/course.entity.ts:13\n                        \n                    \n\n            \n                \n                    generate perimary colume id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/course/course.entity.ts:23\n                        \n                    \n\n            \n                \n                    course subjectb colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.course)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/course/course.entity.ts:47\n                        \n                    \n\n            \n                \n                    creating relation many to one bitween user and course\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { User } from \"src/user/user.entity\";\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from \"typeorm\";\n/**\n * course mapping for data base and colume name\n * @author Md Nasir Husssain\n */\n@Entity()\nexport class Course {\n    /**\n     * generate perimary colume id\n     */\n    @PrimaryGeneratedColumn()\n    id: number\n    /**\n     * couser colume name\n     */\n    @Column()\n    couser_name: string;\n    /**\n     * course subjectb colume name\n     */\n    @Column()\n    subject: string;\n    /**\n     * course duration colume name\n     */\n    @Column()\n    course_duration: string;\n    /**\n     * course colume fees name\n     */\n    @Column()\n    course_fees: number;\n    /**\n     * course colume date name\n     */\n    @Column()\n    course_starting_date: string;\n\n     /**\n      * creating relation many to one bitween user and course\n       */\n      @ManyToOne(() =>User, user => user.course) // specify inverse side as a second parameter\n      /**\n       * Creating user object\n       */\n      user: User[];\n\n     \n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CourseController.html":{"url":"controllers/CourseController.html","title":"controller - CourseController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CourseController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/course/course.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                course\n            \n\n\n            \n                Description\n            \n            \n                Course controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addCourse\n                            \n                            \n                                courseDeleteById\n                            \n                            \n                                findAllCourse\n                            \n                            \n                                findCourseById\n                            \n                            \n                                findCourseByName\n                            \n                            \n                                updateCourseById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addCourse\n                        \n                    \n                \n            \n            \n                \naddCourse(course: CourseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({description: 'CourseDto', required: true, type: CourseDto})@ApiCreatedResponse({description: 'Course addredd successfully', status: undefined})@ApiInternalServerErrorResponse({description: 'Course not addredd successfully', status: undefined})@Post('/addCourse')\n                \n            \n\n            \n                \n                    Defined in src/course/course.controller.ts:27\n                \n            \n\n\n            \n                \n                    addCourse\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    course\n                                    \n                                                CourseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        courseDeleteById\n                        \n                    \n                \n            \n            \n                \ncourseDeleteById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiParam({name: 'id', description: 'name id', required: true})@ApiOkResponse({description: 'Course deleted by this id', status: undefined})@ApiInternalServerErrorResponse({description: 'Course not deleted by this id', status: undefined})@ApiNotFoundResponse({description: 'Course not deleted by this id', status: undefined})@Delete('/courseDeleteById/:id')\n                \n            \n\n            \n                \n                    Defined in src/course/course.controller.ts:92\n                \n            \n\n\n            \n                \n                    course delete by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllCourse\n                        \n                    \n                \n            \n            \n                \nfindAllCourse(course: CourseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'Course found successfully', status: undefined})@ApiInternalServerErrorResponse({description: 'Course not found by successfully', status: undefined})@Get('/findAllCourse')\n                \n            \n\n            \n                \n                    Defined in src/course/course.controller.ts:39\n                \n            \n\n\n            \n                \n                    findAllCourse\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    course\n                                    \n                                                CourseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findCourseById\n                        \n                    \n                \n            \n            \n                \nfindCourseById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiParam({name: 'id', description: 'name id', required: true})@ApiOkResponse({description: 'Course found by this id', status: undefined})@ApiInternalServerErrorResponse({description: 'Course not found by this id', status: undefined})@ApiNotFoundResponse({description: 'Course not found by this id', status: undefined})@Get('/findCourseById/:id')\n                \n            \n\n            \n                \n                    Defined in src/course/course.controller.ts:75\n                \n            \n\n\n            \n                \n                    find course by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        if successs or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findCourseByName\n                        \n                    \n                \n            \n            \n                \nfindCourseByName(subject: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiParam({name: 'subject', description: 'name subject', required: true})@ApiOkResponse({description: 'Course  found by this name', status: undefined})@ApiInternalServerErrorResponse({description: 'Course not found by this name', status: undefined})@ApiNotFoundResponse({description: 'Course not found by this name', status: undefined})@Get('/findCourseByName/:subject')\n                \n            \n\n            \n                \n                    Defined in src/course/course.controller.ts:57\n                \n            \n\n\n            \n                \n                    find course by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    subject\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateCourseById\n                        \n                    \n                \n            \n            \n                \nupdateCourseById(id: number, course: CourseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiParam({name: 'id', description: 'name id', required: true})@ApiOkResponse({description: 'Course updated by this id', status: undefined})@ApiInternalServerErrorResponse({description: 'Course not updated by this id', status: undefined})@ApiNotFoundResponse({description: 'Course not updated by this id', status: undefined})@Put('/updateCourseById/:id')\n                \n            \n\n            \n                \n                    Defined in src/course/course.controller.ts:111\n                \n            \n\n\n            \n                \n                    update by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                                \n                                    course\n                                    \n                                                CourseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, HttpStatus, Param, Post, Put } from \"@nestjs/common\";\nimport { ApiBody, ApiCreatedResponse, ApiInternalServerErrorResponse, ApiNotFoundResponse, ApiOkResponse, ApiParam, ApiTags } from \"@nestjs/swagger\";\nimport { CourseService } from \"./course.service\";\nimport { CourseDto } from \"./dto/course.dto\";\n/**\n * Course controller\n * @author Md Nasir Hussain\n */\n@ApiTags('Course')\n@Controller('course')\nexport class CourseController\n{\n    /**\n     * courseService injectable\n     * @param courseService \n     */\nconstructor(private courseService:CourseService){}\n/**\n * addCourse\n * @param course path\n * @returns if success or failure\n */\n @ApiBody({ description: 'CourseDto', required: true, type: CourseDto })\n @ApiCreatedResponse({ description: 'Course addredd successfully', status: HttpStatus.CREATED })\n @ApiInternalServerErrorResponse({ description: 'Course not addredd successfully', status: HttpStatus.INTERNAL_SERVER_ERROR })\n@Post('/addCourse')\naddCourse(@Body()course:CourseDto):Promise\n{\n return this.courseService.addCourse(course);\n}\n/**\n * findAllCourse\n * @param course path\n * @returns if success or failure\n */\n @ApiOkResponse({ description: 'Course found successfully', status: HttpStatus.OK })\n@ApiInternalServerErrorResponse({ description: \"Course not found by successfully\", status: HttpStatus.INTERNAL_SERVER_ERROR })\n@Get('/findAllCourse')\nfindAllCourse(course:CourseDto):Promise\n{\n    return this.courseService.findAllCourse(course);\n}\n/**\n * find course by name\n * @param subject path\n * @returns if success or failure\n */\n @ApiParam({\n    name: 'subject',\n    description: 'name subject',\n    required: true\n})\n@ApiOkResponse({ description: 'Course  found by this name', status: HttpStatus.OK })\n@ApiInternalServerErrorResponse({ description: 'Course not found by this name', status: HttpStatus.INTERNAL_SERVER_ERROR })\n@ApiNotFoundResponse({ description: 'Course not found by this name', status: HttpStatus.NOT_FOUND })\n@Get('/findCourseByName/:subject')\nfindCourseByName(@Param('subject')subject:string):Promise\n{\n    return this.courseService.findCourseByName(subject);\n}\n/**\n * find course by id\n * @param id path\n * @returns if successs or failure\n */\n @ApiParam({\n    name: 'id',\n    description: 'name id',\n    required: true\n})\n@ApiOkResponse({ description: 'Course found by this id', status: HttpStatus.OK })\n@ApiInternalServerErrorResponse({ description: 'Course not found by this id', status: HttpStatus.INTERNAL_SERVER_ERROR })\n@ApiNotFoundResponse({ description: 'Course not found by this id', status: HttpStatus.NOT_FOUND })\n@Get('/findCourseById/:id')\n findCourseById(@Param('id')id: number) {\nreturn this.courseService.findCourseById(id);\n}\n/**\n * course delete by id\n * @param id path\n * @returns if success or failure\n */\n @ApiParam({\n    name: 'id',\n    description: 'name id',\n    required: true\n})\n@ApiOkResponse({ description: 'Course deleted by this id', status: HttpStatus.OK })\n@ApiInternalServerErrorResponse({ description: 'Course not deleted by this id', status: HttpStatus.INTERNAL_SERVER_ERROR })\n@ApiNotFoundResponse({ description: 'Course not deleted by this id', status: HttpStatus.NOT_FOUND })\n@Delete('/courseDeleteById/:id')\ncourseDeleteById(@Param('id')id:number)\n{\n return this.courseService.courseDeleteById(id);\n}\n/**\n * update by id\n * @param id path\n * @param course path \n * @returns if success or failure\n */\n @ApiParam({\n    name: 'id',\n    description: 'name id',\n    required: true\n})\n@ApiOkResponse({ description: 'Course updated by this id', status: HttpStatus.OK })\n@ApiInternalServerErrorResponse({ description: 'Course not updated by this id', status: HttpStatus.INTERNAL_SERVER_ERROR })\n@ApiNotFoundResponse({ description: 'Course not updated by this id', status: HttpStatus.NOT_FOUND })\n@Put('/updateCourseById/:id')\nupdateCourseById(@Param('id')id:number, @Body()course:CourseDto):Promise\n{\nreturn this.courseService.updateCourseById(id,course);\n}\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CourseDto.html":{"url":"classes/CourseDto.html","title":"class - CourseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CourseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/course/dto/course.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                CourseDto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                course_duration\n                            \n                            \n                                course_fees\n                            \n                            \n                                course_starting_date\n                            \n                            \n                                couser_name\n                            \n                            \n                                id\n                            \n                            \n                                subject\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        course_duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Course duration name can not be empty'})@MinLength(1, {message: 'Course duration  name minimum one leter digits'})@MaxLength(2, {message: 'Course duration name should be maximum 2 digits or leters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/course/dto/course.dto.ts:48\n                        \n                    \n\n            \n                \n                    Course course duration colume name\nand colume valideed here\nApi Property\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        course_fees\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Course fees name can not be empty'})@MinLength(4, {message: 'Course fees  minimum  4 digits'})@MaxLength(5, {message: 'Course fees should be maximum 5 digits'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/course/dto/course.dto.ts:59\n                        \n                    \n\n            \n                \n                    Course course_fees colume name\nand colume valideed here\nApi Property\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        course_starting_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Course starting date can not be empty'})@IsString({message: 'Course starting date should be date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/course/dto/course.dto.ts:69\n                        \n                    \n\n            \n                \n                    Course ciurse starting date colume name\nand colume valideed here\nApi Property\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        couser_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Course name can not be empty'})@IsString({message: 'Course name should be string'})@MinLength(2, {message: 'Course name minimum two leter'})@MaxLength(100, {message: 'Course name should be maximum 100 leters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/course/dto/course.dto.ts:25\n                        \n                    \n\n            \n                \n                    Course colume name\nand also validated here\nadd api property\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/course/dto/course.dto.ts:14\n                        \n                    \n\n            \n                \n                    Course id colume name\nand colume valideed here\nApi Property\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Subject name can not be empty'})@IsString({message: 'Subject name should be string'})@MinLength(2, {message: 'Subject name minimum two leter'})@MaxLength(100, {message: 'Subject name should be maximum 100 leters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/course/dto/course.dto.ts:37\n                        \n                    \n\n            \n                \n                    Course subject colume name\nand colume valideed here\nApi Property\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                    \n                        \n                                Defined in src/course/dto/course.dto.ts:73\n                        \n                    \n\n            \n                \n                    create relation here bitween user course\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNotEmpty, IsString, MaxLength, MinLength } from \"class-validator\";\nimport { User } from \"src/user/user.entity\";\n/**\n * CourseDto\n * @author Md Nasir Hussain\n */\nexport class CourseDto {\n    /**\n     * Course id colume name\n     * and colume valideed here\n     * Api Property\n     */\n    id: number\n    /**\n     * Course colume name\n     * and also validated here\n     * add api property\n     */\n    @ApiProperty()\n    @IsNotEmpty({ message: \"Course name can not be empty\" })\n    @IsString({ message: \"Course name should be string\" })\n    @MinLength(2, { message: \"Course name minimum two leter\" })\n    @MaxLength(100, { message: \"Course name should be maximum 100 leters\" })\n    couser_name: string;\n\n    /**\n    * Course subject colume name\n     * and colume valideed here\n    * Api Property\n    */\n    @ApiProperty()\n    @IsNotEmpty({ message: \"Subject name can not be empty\" })\n    @IsString({ message: \"Subject name should be string\" })\n    @MinLength(2, { message: \"Subject name minimum two leter\" })\n    @MaxLength(100, { message: \"Subject name should be maximum 100 leters\" })\n    subject: string;\n\n    /**\n     * Course course duration colume name\n     * and colume valideed here\n     * Api Property\n    */\n    @ApiProperty()\n    @IsNotEmpty({ message: \"Course duration name can not be empty\" })\n    @MinLength(1, { message: \"Course duration  name minimum one leter digits\" })\n    @MaxLength(2, { message: \"Course duration name should be maximum 2 digits or leters\" })\n    course_duration: string;\n\n    /**\n    * Course course_fees colume name\n    * and colume valideed here\n    * Api Property\n    */\n    @ApiProperty()\n    @IsNotEmpty({ message: \"Course fees name can not be empty\" })\n    @MinLength(4, { message: \"Course fees  minimum  4 digits\" })\n    @MaxLength(5, { message: \"Course fees should be maximum 5 digits\" })\n    course_fees: number;\n\n    /**\n    * Course ciurse starting date colume name\n    * and colume valideed here\n    * Api Property\n    */\n    @ApiProperty()\n    @IsNotEmpty({ message: \"Course starting date can not be empty\" })\n    @IsString({ message: \"Course starting date should be date\" })\n    course_starting_date: string;\n    /**\n     * create relation here bitween user course\n     */\n    user: User[];\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CourseModule.html":{"url":"modules/CourseModule.html","title":"module - CourseModule","body":"\n                   \n\n\n\n\n    Modules\n    CourseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CourseModule\n\n\n\ncluster_CourseModule_providers\n\n\n\n\nCourseService\n\nCourseService\n\n\n\nCourseModule\n\nCourseModule\n\nCourseModule -->\n\nCourseService->CourseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/course/course.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            couse module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CourseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CourseController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { User } from \"src/user/user.entity\";\nimport { UserRepository } from \"src/user/user.repository\";\nimport { CourseController } from \"./course.controller\";\nimport { Course } from \"./course.entity\";\nimport { CourseRepository } from \"./course.repository\";\nimport { CourseService } from \"./course.service\";\n/**\n * couse module\n * @author Md Nasir Hussain\n */\n@Module({\n    imports:[TypeOrmModule.forFeature([Course,CourseRepository,User,UserRepository])],\n    exports:[],\n    providers:[CourseService],\n    controllers:[CourseController],\n})\n/**\n * course module\n */\nexport class CourseModule\n{\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CourseRepository.html":{"url":"classes/CourseRepository.html","title":"class - CourseRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CourseRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/course/course.repository.ts\n        \n\n\n            \n                Description\n            \n            \n                course repository\n\n            \n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from \"typeorm\";\nimport { Course } from \"./course.entity\";\n/**\n * course repository\n * @author Md Nasir Hussain\n */\n@EntityRepository(Course)\nexport class CourseRepository extends Repository{}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CourseService.html":{"url":"injectables/CourseService.html","title":"injectable - CourseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CourseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/course/course.service.ts\n        \n\n\n            \n                Description\n            \n            \n                CourseService\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCourse\n                            \n                            \n                                    Async\n                                courseDeleteById\n                            \n                            \n                                    Async\n                                findAllCourse\n                            \n                            \n                                    Async\n                                findCourseById\n                            \n                            \n                                    Async\n                                findCourseByName\n                            \n                            \n                                    Async\n                                updateCourseById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(courseRepo: CourseRepository)\n                    \n                \n                        \n                            \n                                Defined in src/course/course.service.ts:9\n                            \n                        \n\n                \n                    \n                            course service injectable\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        courseRepo\n                                                  \n                                                        \n                                                                        CourseRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                path\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCourse\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCourse(course: CourseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/course/course.service.ts:21\n                \n            \n\n\n            \n                \n                    add couse\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    course\n                                    \n                                                CourseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        courseDeleteById\n                        \n                    \n                \n            \n            \n                \n                    \n                    courseDeleteById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/course/course.service.ts:102\n                \n            \n\n\n            \n                \n                    course deleted by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllCourse\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllCourse(course: CourseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/course/course.service.ts:42\n                \n            \n\n\n            \n                \n                    find all course\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    course\n                                    \n                                                CourseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCourseById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCourseById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/course/course.service.ts:82\n                \n            \n\n\n            \n                \n                    find course by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCourseByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCourseByName(subject: string)\n                \n            \n\n\n            \n                \n                    Defined in src/course/course.service.ts:62\n                \n            \n\n\n            \n                \n                    find course by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    subject\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        if succcess or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateCourseById\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCourseById(id: number, course: CourseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/course/course.service.ts:124\n                \n            \n\n\n            \n                \n                    update course by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                                \n                                    course\n                                    \n                                                CourseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, InternalServerErrorException } from \"@nestjs/common\";\nimport { CourseRepository } from \"./course.repository\";\nimport { CourseDto } from \"./dto/course.dto\";\n/**\n * CourseService\n * @author Md Nasir Hussain\n */\n@Injectable()\nexport class CourseService {\n    /**\n     * course service injectable\n     * @param courseRepo  path\n     */\n    constructor(private courseRepo: CourseRepository) { }\n    /**\n     * add couse\n     * @param course \n     * @returns if success or failure\n     */\n\n    async addCourse(course: CourseDto): Promise {\n        try {\n            let response = await this.courseRepo.save(course);\n            if (response) {\n                const message: string = \"Course inserted successfully\";\n                return message;\n            }\n            else {\n                const message: string = \"Course not inserted successfully\";\n                throw new InternalServerErrorException(message)\n            }\n        }\n        catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n    /**\n     * find all course\n     * @param course path\n     * @returns if success or failure\n     */\n    async findAllCourse(course: CourseDto): Promise {\n        try {\n            let response = await this.courseRepo.find()\n            if (response) {\n                return response;\n            }\n            else {\n                const message: string = \"Course not found\";\n                throw new InternalServerErrorException(message);\n            }\n        }\n        catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n    /**\n     * find course by name\n     * @param subject path\n     * @returns if succcess or failure\n     */\n    async findCourseByName(subject: string): Promise {\n        try {\n            let response = await this.courseRepo.find({ subject: subject })\n            if (response) {\n                return response;\n            }\n            else {\n                const message: string = \"Course not found by this name\";\n                throw new InternalServerErrorException(message);\n            }\n        }\n        catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n    /**\n     * find course by id\n     * @param id path\n     * @returns if success or failure\n     */\n    async findCourseById(id: number) {\n        try {\n            let response = await this.courseRepo.findOne(id);\n            if (response) {\n                return response;\n            }\n            else {\n                const message: string = \"Course not found by this id \" + id;\n                throw new InternalServerErrorException(message);\n            }\n        }\n        catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n    /**\n     * course deleted by id\n     * @param id  path\n     * @returns if success or failure\n     */\n    async courseDeleteById(id: number) {\n        try {\n            let response = await this.courseRepo.delete(id);\n            if (response.affected > 0) {\n                const message: string = \"Course deleted by this id \" + id;\n                throw new InternalServerErrorException(message);\n            }\n            else {\n                const message: string = \"Course not deleted by this id \" + id;\n                throw new InternalServerErrorException(message);\n            }\n        }\n        catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n    /**\n     * update course by id\n     * @param id path\n     * @param course path\n     * @returns if success or failure\n     */\n    async updateCourseById(id: number, course: CourseDto): Promise {\n        try {\n            let response = await this.courseRepo.update(id, course);\n            if (response) {\n                const message: string = \"Course updated successfully\";\n                return message;\n            }\n            else {\n                const message: string = \"Course not updated successfully\";\n                throw new InternalServerErrorException(message);\n            }\n\n        }\n        catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomException.html":{"url":"classes/CustomException.html","title":"class - CustomException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/custom-exception/custom-exception.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                custom exception class\n\n            \n\n            \n                Extends\n            \n            \n                    HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message)\n                    \n                \n                        \n                            \n                                Defined in src/common/custom-exception/custom-exception.exception.ts:7\n                            \n                        \n\n                \n                    \n                            constructor creation\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                path\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from \"@nestjs/common\";\n\n/**\n * custom exception class\n * @author Md Nasir Husssain\n */\n export class CustomException extends HttpException {\n    /**\n     * constructor creation\n     * @param message  path\n     */\n    constructor(message) {\n        /**\n         * super classes \n         */\n        super(message, HttpStatus.NOT_FOUND);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExceptionExceptionFilter.html":{"url":"classes/ExceptionExceptionFilter.html","title":"class - ExceptionExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExceptionExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exception-filter/exception-filter.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                ExceptionExceptionFilter\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/exception-filter/exception-filter.filter.ts:15\n                \n            \n\n\n            \n                \n                    ExceptionExceptionFilter class\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter } from \"@nestjs/common\";\nimport { Request, Response } from \"express\";\n/**\n * ExceptionExceptionFilter\n * @author Md Nasir Hussain\n */\n @Catch()\n export class ExceptionExceptionFilter implements ExceptionFilter {\n     /**\n      * ExceptionExceptionFilter class\n      * @param exception path\n      * @param host path\n      * @returns if success or failure\n      */\n     catch(exception: any, host: ArgumentsHost) {\n         /**\n          * switchToHttp and store data\n          */\n         let ctx = host.switchToHttp();\n         /**\n          * getRequest and store\n          */\n         let request = ctx.getRequest();\n         /**\n          * getResponse and store\n          */\n         let response = ctx.getResponse();\n         /**\n          * getStatus and store\n          */\n         let status = exception.getStatus();\n         /**\n          * return here response,statusCode,message,url,time\n          */\n         return response.status(status).json({\n             /**\n              * status code sending status\n              */\n             statusCode: status,\n             /**\n              * exception message passing here \n              */\n             message: exception.message,\n             /**\n              * api url passing from here\n              */\n             url: request.url,\n             /**\n              * sending date and time from  here\n              */\n             time: new Date().toISOString()\n         });\n\n     }\n }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/guards/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                JwtAuthGuard\n\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n/**\n * JwtAuthGuard\n * @author Md Nasir Hussain\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt'){\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/jwt/jwt-payload.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                interface jwtpayload\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            emailId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        emailId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        emailId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    rolse\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n    /**\n     * rolse \n     */\n    emailId: string\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/jwt/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                JwtStrategy class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepo: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/user/jwt/jwt.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            user repo injectable\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepo\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/user/jwt/jwt.strategy.ts:30\n                \n            \n\n\n            \n                \n                    user validate\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\nimport { UserRepository } from \"../user.repository\";\nimport { JwtPayload } from \"./jwt-payload.interface\";\n/**\n * JwtStrategy class\n * @author hotel managements\n */\n @Injectable()\n export class JwtStrategy extends PassportStrategy(Strategy) {\n     /**\n      * user repo injectable\n      * @param userRepo \n      */\n     constructor(private userRepo: UserRepository) {\n         /**\n          * super class\n          */\n         super({\n             secretOrKey:'topSecret51',\n             jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(), \n         })\n     }\n /**\n  * user validate\n  * @param payload path\n  * @returns if success or failure\n  */\n     async validate(payload: JwtPayload) {\n         console.log('payload function colling');\n         try {\n             let response = await this.userRepo.findOneOrFail({emailId: payload.emailId});\n             return response;   \n         }\n         catch (error) {\n             throw new HttpException(error.message, HttpStatus.UNAUTHORIZED)\n         }\n     }\n }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                login dto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                emailId\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        emailId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'User id required'})@IsEmail({messaage: 'Enter valid userId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/login.dto.ts:16\n                        \n                    \n\n            \n                \n                    User id required\nemail colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'User password required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/login.dto.ts:23\n                        \n                    \n\n            \n                \n                    user password required\nuser password colume name\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail, IsNotEmpty } from \"class-validator\";\n\n/**\n * login dto\n * @author Md Nasir Hussain\n */\n export class LoginDto {\n    /**\n     * User id required\n     * email colume name\n     */\n     @ApiProperty()\n    @IsNotEmpty({ message: \"User id required\" })\n    @IsEmail({ messaage: \"Enter valid userId\" })\n    emailId: string;\n    /**\n     * user password required\n     * user password colume name\n     */\n     @ApiProperty()\n    @IsNotEmpty({ message: \"User password required\" })\n    password: string;\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/transform-interceptor/transform.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                interface response class\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    create object here\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { CallHandler, ExecutionContext, Injectable, NestInterceptor } from \"@nestjs/common\";\nimport { map, Observable } from \"rxjs\";\n/**\n * interface response class\n * @author Md Nasir Hussain\n */\n export interface Response {\n   /**\n    * create object here\n    */\n    data: T;\n  }\n  /**\n   * TransformInterceptor class\n   */\n  @Injectable()\n  export class TransformInterceptor implements NestInterceptor> {\n    /**\n     * ExecutionContext\n     * @param context  path\n     * @param next path\n     * @returns if succcess or failure\n     */\n    intercept(context: ExecutionContext, next: CallHandler): Observable> {\n      /**\n       * return maping data\n       */\n      return next.handle().pipe(map(data => ({ data })));\n    }\n  }\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/user/guards/roles.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    RolesGuard\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflectore: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/user/guards/roles.guard.ts:11\n                            \n                        \n\n                \n                    \n                            injectable reflectore\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflectore\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/user/guards/roles.guard.ts:22\n                \n            \n\n\n            \n                \n                    Canactivated\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { Observable } from \"rxjs\";\nimport { ROLES_KEY } from \"../role/roles.decorator\";\nimport { Role } from \"../rolse/role\";\n/**\n * RolesGuard\n * @author Md Nasir Hussain\n */\n@Injectable()\nexport  class RolesGuard implements CanActivate{\n  /**\n   * injectable reflectore\n   * @param reflectore \n   */\n    constructor(private reflectore:Reflector){}\n    /**\n     * Canactivated\n     * @param context path\n     * @returns if success or failure\n     */\n    canActivate(context: ExecutionContext): boolean | Promise | Observable {\n         /**\n     * requiredRoles\n     */\n    const requiredRoles = this.reflectore.getAllAndOverride(ROLES_KEY, [\n        context.getHandler(),\n        context.getClass(),\n      ]);\n      if (!requiredRoles) {\n        return true;\n      }\n      /**\n       * user role\n       */\n      const { user } = context.switchToHttp().getRequest();\n      /**\n       * return roles\n       */\n      return requiredRoles.some((role) => user.role?.includes(role));\n    }\n    }\n\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/transform-interceptor/transform.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                TransformInterceptor class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/transform-interceptor/transform.interceptor.ts:24\n                \n            \n\n\n            \n                \n                    ExecutionContext\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        if succcess or failure\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CallHandler, ExecutionContext, Injectable, NestInterceptor } from \"@nestjs/common\";\nimport { map, Observable } from \"rxjs\";\n/**\n * interface response class\n * @author Md Nasir Hussain\n */\n export interface Response {\n   /**\n    * create object here\n    */\n    data: T;\n  }\n  /**\n   * TransformInterceptor class\n   */\n  @Injectable()\n  export class TransformInterceptor implements NestInterceptor> {\n    /**\n     * ExecutionContext\n     * @param context  path\n     * @param next path\n     * @returns if succcess or failure\n     */\n    intercept(context: ExecutionContext, next: CallHandler): Observable> {\n      /**\n       * return maping data\n       */\n      return next.handle().pipe(map(data => ({ data })));\n    }\n  }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                user class mapping databse table colume name here\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                age\n                            \n                            \n                                course\n                            \n                            \n                                emailId\n                            \n                            \n                                gender\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Address\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, address => address.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:60\n                        \n                    \n\n            \n                \n                    creating relation one to one bitween user and address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:52\n                        \n                    \n\n            \n                \n                    user  age colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        course\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Course[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, course => course.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:69\n                        \n                    \n\n            \n                \n                    create relation bitween\nuser and course\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emailId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:27\n                        \n                    \n\n            \n                \n                    user email id unique colume\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:47\n                        \n                    \n\n            \n                \n                    user gender colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:17\n                        \n                    \n\n            \n                \n                    user id PrimaryGeneratedColumn\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:22\n                        \n                    \n\n            \n                \n                    user colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:37\n                        \n                    \n\n            \n                \n                    user password colume\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:32\n                        \n                    \n\n            \n                \n                    user contact number\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Role, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:42\n                        \n                    \n\n            \n                \n                    user role define here\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Address } from \"src/address/address.entity\"\nimport { Course } from \"src/course/course.entity\"\nimport { Column, Entity, OneToMany, OneToOne, PrimaryGeneratedColumn } from \"typeorm\"\nimport { Role } from \"./rolse/role\"\n\n/**\n * user class mapping databse table colume name here\n * @author Md Nasir Hussain\n */\n@Entity()\nexport class User {\n      \n      /**\n      * user id PrimaryGeneratedColumn\n      */\n      @PrimaryGeneratedColumn()\n      id: number\n      /**\n       * user colume name\n       */\n      @Column()\n      name: string\n      /**\n       * user email id unique colume\n       */\n      @Column({ unique: true })\n      emailId: string\n      /**\n       * user contact number\n       */\n      @Column()\n      phone: number\n      /**\n       * user password colume\n       */\n      @Column()\n      password: string\n      /**\n       * user role define here\n       */\n      @Column({ type: 'enum', enum: Role, default: Role.User })\n      role: Role\n      /**\n       * user gender colume name\n       */\n      @Column()\n      gender: string\n      /**\n       * user  age colume name\n       */\n      @Column()\n      age: number\n      /**\n      * creating relation one to one bitween user and address\n       */\n       @OneToOne(() =>Address, address => address.user) // specify inverse side as a second parameter\n       /**\n        * creat object user and address\n        */\n       address: Address;\n       /**\n        * create relation bitween\n        * user and course\n        */\n       @OneToMany(()=>Course, course=>course.user)\n       /**\n        * create object of course\n        */\n       course:Course[];\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n            \n                Description\n            \n            \n                user controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findUserByName\n                            \n                            \n                                findUserList\n                            \n                            \n                                userDeleteById\n                            \n                            \n                                userFindById\n                            \n                            \n                                userLogin\n                            \n                            \n                                userRegister\n                            \n                            \n                                userUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findUserByName\n                        \n                    \n                \n            \n            \n                \nfindUserByName(name: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiParam({name: 'name', description: 'name name', required: true})@ApiOkResponse({description: 'User found by name successfully', status: undefined})@ApiInternalServerErrorResponse({description: 'user not found by this name', status: undefined})@ApiNotFoundResponse({description: 'User not found for this name', status: undefined})@Get('/findUserByName/:name')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:88\n                \n            \n\n\n            \n                \n                    find user by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findUserList\n                        \n                    \n                \n            \n            \n                \nfindUserList(user: UserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'Find user  list', status: undefined})@ApiInternalServerErrorResponse({description: 'User list not found', status: undefined})@Get('/findUserList')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:52\n                \n            \n\n\n            \n                \n                    find all user list here\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing user obj\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userDeleteById\n                        \n                    \n                \n            \n            \n                \nuserDeleteById(id: UserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiParam({name: 'id', description: 'name id', required: true})@ApiOkResponse({description: 'User deleted  successfully by id', status: undefined})@ApiInternalServerErrorResponse({description: 'User not deleted by this id', status: undefined})@ApiNotFoundResponse({description: 'User not deleted for this id', status: undefined})@Delete('/userDeleteById/:id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:128\n                \n            \n\n\n            \n                \n                    userDeleteById by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userFindById\n                        \n                    \n                \n            \n            \n                \nuserFindById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiParam({name: 'id', description: 'name id', required: true})@ApiOkResponse({description: 'User found by id successfully', status: undefined})@ApiInternalServerErrorResponse({description: 'user not found by this id', status: undefined})@ApiNotFoundResponse({description: 'User not found for this id', status: undefined})@Get('/userFindById/:id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:71\n                \n            \n\n\n            \n                \n                    find user particular recourd by id\nmethod level exception\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing id here\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        if success or failure\nmethod level exception\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userLogin\n                        \n                    \n                \n            \n            \n                \nuserLogin(userLogin: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({description: 'LoginDto', required: true, type: LoginDto})@ApiCreatedResponse({description: 'User login  successfully', status: undefined})@ApiInternalServerErrorResponse({description: 'User not  login successfully', status: undefined})@Post('/userLogin')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:40\n                \n            \n\n\n            \n                \n                    user validating\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userLogin\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userRegister\n                        \n                    \n                \n            \n            \n                \nuserRegister(user: UserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({description: 'UserDto', required: true, type: UserDto})@ApiCreatedResponse({description: 'User registered successfully', status: undefined})@ApiInternalServerErrorResponse({description: 'User not registered successfully', status: undefined})@Post('/register')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:28\n                \n            \n\n\n            \n                \n                    user registering here\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing user obj\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userUpdate\n                        \n                    \n                \n            \n            \n                \nuserUpdate(id: number, userUpdate: UserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiParam({name: 'id', description: 'name id', required: true})@ApiOkResponse({description: 'User updated by id successfully', status: undefined})@ApiInternalServerErrorResponse({description: 'user not updated by this id', status: undefined})@ApiNotFoundResponse({description: 'User not updated for this id', status: undefined})@Put('/userUpdateById/:id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:108\n                \n            \n\n\n            \n                \n                    userUpdateById updated by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing path here\n\n                                    \n                                \n                                \n                                    userUpdate\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        userUpdate passing path here\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, HttpStatus, Param, Post, Put } from \"@nestjs/common\";\nimport { ApiBody, ApiCreatedResponse, ApiInternalServerErrorResponse, ApiNotFoundResponse, ApiOkResponse, ApiParam, ApiTags } from \"@nestjs/swagger\";\nimport { UserDto } from \"./dto/user.dto\";\nimport { LoginDto } from \"./login.dto\";\nimport { UserService } from \"./user.service\";\n/**\n * user controller\n * @author Md Nasir Hussain\n */\n @ApiTags('User')\n@Controller('user')\nexport class UserController\n{\n/**\n     * user business  logic class injectable here\n     * @param userService \n     */\n constructor(private userService: UserService) { }\n /**\n  * user registering here\n  * @param user passing user obj\n  * @returns if success or failure\n  */\n  @ApiBody({ description: 'UserDto', required: true, type: UserDto })\n  @ApiCreatedResponse({ description: 'User registered successfully', status: HttpStatus.CREATED })\n  @ApiInternalServerErrorResponse({ description: 'User not registered successfully', status: HttpStatus.INTERNAL_SERVER_ERROR })\n @Post('/register')\n userRegister(@Body() user: UserDto): Promise {\n     return this.userService.userRegister(user);\n }\n/**\n * user validating\n * @param userLogin  path\n * @returns if success or failure\n */\n @ApiBody({ description: 'LoginDto', required: true, type: LoginDto})\n  @ApiCreatedResponse({ description: 'User login  successfully', status: HttpStatus.CREATED })\n  @ApiInternalServerErrorResponse({ description: 'User not  login successfully', status: HttpStatus.INTERNAL_SERVER_ERROR })\n @Post('/userLogin')\n userLogin(@Body() userLogin: LoginDto):Promise {\n     return this.userService.userLogin(userLogin)\n }\n /**\n  * find all user list here\n  * @param user  passing user obj\n  * @returns if success or failure\n  */\n //@UseGuards(JwtAuthGuard)\n @ApiOkResponse({ description: 'Find user  list', status: HttpStatus.OK })\n @ApiInternalServerErrorResponse({ description: \"User list not found\", status: HttpStatus.INTERNAL_SERVER_ERROR })\n @Get('/findUserList')\n findUserList(user: UserDto){\n     return this.userService.findUserList(user);\n }\n /**\n  * find user particular recourd by id\n  * @param id passing id here\n  * @returns if success or failure\n  * method level exception\n  */\n //@UseFilters(ExceptionExceptionFilter)\n @ApiParam({\n    name: 'id',\n    description: 'name id',\n    required: true\n})\n@ApiOkResponse({ description: 'User found by id successfully', status: HttpStatus.OK })\n@ApiInternalServerErrorResponse({ description: 'user not found by this id', status: HttpStatus.INTERNAL_SERVER_ERROR })\n@ApiNotFoundResponse({ description: 'User not found for this id', status: HttpStatus.NOT_FOUND })\n @Get('/userFindById/:id')\n userFindById(@Param('id') id: number) {\n     return this.userService.userFindById(id);\n }\n /**\n  * find user by name\n  * @param name passing path\n  * @returns if success or failure\n  */\n  @ApiParam({\n    name: 'name',\n    description: 'name name',\n    required: true\n})\n@ApiOkResponse({ description: 'User found by name successfully', status: HttpStatus.OK })\n@ApiInternalServerErrorResponse({ description: 'user not found by this name', status: HttpStatus.INTERNAL_SERVER_ERROR })\n@ApiNotFoundResponse({ description: 'User not found for this name', status: HttpStatus.NOT_FOUND })\n @Get('/findUserByName/:name')\n findUserByName(@Param('name') name: string) {\n     return this.userService.findUserByName(name);\n }\n \n /**\n  * userUpdateById updated by id\n  * @param id passing path here\n  * @param userUpdate  userUpdate passing path here\n  * @returns if success or failure\n  */\n \n @ApiParam({\n    name: 'id',\n    description: 'name id',\n    required: true\n})\n@ApiOkResponse({ description: 'User updated by id successfully', status: HttpStatus.OK })\n@ApiInternalServerErrorResponse({ description: 'user not updated by this id', status: HttpStatus.INTERNAL_SERVER_ERROR })\n@ApiNotFoundResponse({ description: 'User not updated for this id', status: HttpStatus.NOT_FOUND })\n @Put('/userUpdateById/:id')\n userUpdate(@Param('id') id: number, @Body() userUpdate: UserDto) {\n     return this.userService.userUpdate(id, userUpdate);\n }\n \n /**\n  * userDeleteById by id\n  * @param id  passing path\n  * @returns if success or failure\n  */\n //@Roles(Role.Admin)\n //@UseGuards(RolesGuard)\n @ApiParam({\n    name: 'id',\n    description: 'name id',\n    required: true\n})\n@ApiOkResponse({ description: 'User deleted  successfully by id', status: HttpStatus.OK })\n@ApiInternalServerErrorResponse({ description: 'User not deleted by this id', status: HttpStatus.INTERNAL_SERVER_ERROR })\n@ApiNotFoundResponse({ description: 'User not deleted for this id', status: HttpStatus.NOT_FOUND })\n @Delete('/userDeleteById/:id')\n userDeleteById(@Param('id') id: UserDto) {\n     return this.userService.userDeleteById(id);\n }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                user dto class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                age\n                            \n                            \n                                course\n                            \n                            \n                                emailId\n                            \n                            \n                                gender\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Address\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:75\n                        \n                    \n\n            \n                \n                    creating one to one relation bitween user and address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'User age can not be empty'})@IsNumber()@MinLength(1, {message: 'User age minimum one year'})@MaxLength(3, {message: 'User age should be maximum 3 digit'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:71\n                        \n                    \n\n            \n                \n                    user age colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        course\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Course[]\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:79\n                        \n                    \n\n            \n                \n                    Creating user course\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emailId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'User eamil can not be empty'})@MinLength(3, {message: 'User email minimum three leter'})@MaxLength(100, {message: 'User email should be maximum 100 leters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:32\n                        \n                    \n\n            \n                \n                    user email colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'User gender can not be empty'})@IsString({message: 'User gender should be string'})@MinLength(5, {message: 'User gender minimum five leter'})@MaxLength(6, {message: 'User gender should be maximum 6 leters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:62\n                        \n                    \n\n            \n                \n                    user gender colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:15\n                        \n                    \n\n            \n                \n                    user id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'User name can not be empty'})@IsString({message: 'User name should be string'})@MinLength(3, {message: 'User name minimum three leter'})@MaxLength(100, {message: 'User name should be maximum 100 leters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:24\n                        \n                    \n\n            \n                \n                    user colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'User password can not be empty'})@MinLength(3, {message: 'User password minimum three leter or number'})@MaxLength(100, {message: 'User name should be maximum 100 leters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:49\n                        \n                    \n\n            \n                \n                    user password colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'User phone number can not be empty'})@IsNumber()@MinLength(10, {message: 'User phone number should be minimum 10 digit numbers'})@MaxLength(100, {message: 'User phone number should be maximum 10 didgit numbers'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:41\n                        \n                    \n\n            \n                \n                    user contact number\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:53\n                        \n                    \n\n            \n                \n                    rolse added here\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\"\nimport { IsNotEmpty, IsNumber, IsString, MaxLength, MinLength } from \"class-validator\"\nimport { Address } from \"src/address/address.entity\"\nimport { Course } from \"src/course/course.entity\"\nimport { Role } from \"../rolse/role\"\n\n/**\n * user dto class\n * @author Md Nasir Hussain\n */\n export class UserDto {\n    /**\n    * user id\n    */\n    id: number\n    /**\n     * user colume name\n     */\n     @ApiProperty()\n    @IsNotEmpty({ message: \"User name can not be empty\" })\n    @IsString({ message: \"User name should be string\" })\n    @MinLength(3, { message: \"User name minimum three leter\" })\n    @MaxLength(100, { message: \"User name should be maximum 100 leters\" })\n    name: string\n    /**\n     * user email colume name\n     */\n     @ApiProperty()\n    @IsNotEmpty({ message: \"User eamil can not be empty\" })\n    @MinLength(3, { message: \"User email minimum three leter\" })\n    @MaxLength(100, { message: \"User email should be maximum 100 leters\" })\n    emailId: string\n    /**\n     * user contact number\n     */\n     @ApiProperty()\n    @IsNotEmpty({ message: \"User phone number can not be empty\" })\n    @IsNumber()\n    @MinLength(10, { message: \"User phone number should be minimum 10 digit numbers\" })\n    @MaxLength(100, { message: \"User phone number should be maximum 10 didgit numbers\" })\n    phone: number\n    /**\n     * user password colume name\n     */\n     @ApiProperty()\n    @IsNotEmpty({ message: \"User password can not be empty\" })\n    @MinLength(3, { message: \"User password minimum three leter or number\" })\n    @MaxLength(100, { message: \"User name should be maximum 100 leters\" })\n    password: string\n    /**\n     * rolse added here\n     */\n    role: Role\n    /**\n     * user gender colume name\n     */\n     @ApiProperty()\n    @IsNotEmpty({ message: \"User gender can not be empty\" })\n    @IsString({ message: \"User gender should be string\" })\n    @MinLength(5, { message: \"User gender minimum five leter\" })\n    @MaxLength(6, { message: \"User gender should be maximum 6 leters\" })\n    gender: string\n    /**\n     * user age colume name\n     */\n     @ApiProperty()\n    @IsNotEmpty({ message: \"User age can not be empty\" })\n    @IsNumber()\n    @MinLength(1, { message: \"User age minimum one year\" })\n    @MaxLength(3, { message: \"User age should be maximum 3 digit\" })\n    age: number\n    /**\n     * creating one to one relation bitween user and address\n     */\n    address: Address;\n    /**\n     * Creating user course\n     */\n    course:Course[];\n }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nUserModule\n\nUserModule\n\nJwtStrategy  -->\n\nUserModule->JwtStrategy \n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nUserModule -->\n\nJwtStrategy->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            user module injectable\ninjectable TypeOrmModule\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtStrategy\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { JwtModule } from \"@nestjs/jwt\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { Address } from \"src/address/address.entity\";\nimport { AddressRepository } from \"src/address/address.repository\";\nimport { Course } from \"src/course/course.entity\";\nimport { CourseRepository } from \"src/course/course.repository\";\nimport { RolesGuard } from \"./guards/roles.guard\";\nimport { JwtStrategy } from \"./jwt/jwt.strategy\";\nimport { UserController } from \"./user.controller\";\nimport { User } from \"./user.entity\";\nimport { UserRepository } from \"./user.repository\";\nimport { UserService } from \"./user.service\";\n\n/**\n * user module injectable\n * injectable TypeOrmModule \n */\n @Module({\n    imports: [\n        PassportModule.register({ defaultStrategy: 'jwt' }),\n        JwtModule.register({\n            secret: 'topSecret51',\n            signOptions: {\n                expiresIn: '180s'\n            }\n        }),\n        TypeOrmModule.forFeature([User,UserRepository,Address,AddressRepository,Course,CourseRepository])\n    ],\n    //exports:[TypeOrmModule,JwtStrategy,PassportModule],\n    exports: [JwtStrategy, PassportModule],\n    providers: [UserService, JwtStrategy, RolesGuard],\n    controllers: [UserController],\n})\n/**\n * user module class\n * @author hotel managements\n */\nexport class UserModule {\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.repository.ts\n        \n\n\n            \n                Description\n            \n            \n                user repository class responsible for crude opretion\n\n            \n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from \"typeorm\";\nimport { User } from \"./user.entity\";\n/**\n * user repository class responsible for crude opretion\n * @author Md Nasir Hussain\n */\n @EntityRepository(User)\n export class UserRepository extends Repository{}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                user service class here we will write business logic\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findUserByName\n                            \n                            \n                                    Async\n                                findUserList\n                            \n                            \n                                    Async\n                                userDeleteById\n                            \n                            \n                                    Async\n                                userFindById\n                            \n                            \n                                    Async\n                                userLogin\n                            \n                            \n                                    Async\n                                userRegister\n                            \n                            \n                                    Async\n                                userUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepo: UserRepository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:13\n                            \n                        \n\n                \n                    \n                            \nuser service class is inject here user repository class\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepo\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserByName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:132\n                \n            \n\n\n            \n                \n                    find by user name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserList\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserList(user: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:92\n                \n            \n\n\n            \n                \n                    findUserList here\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        information\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        userDeleteById\n                        \n                    \n                \n            \n            \n                \n                    \n                    userDeleteById(id: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:179\n                \n            \n\n\n            \n                \n                    userDeleteById\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing path here\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        userFindById\n                        \n                    \n                \n            \n            \n                \n                    \n                    userFindById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:112\n                \n            \n\n\n            \n                \n                    user finding by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        userLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    userLogin(userLogin: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:60\n                \n            \n\n\n            \n                \n                    validate the user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userLogin\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        userRegister\n                        \n                    \n                \n            \n            \n                \n                    \n                    userRegister(user: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:25\n                \n            \n\n\n            \n                \n                    user registering\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        userUpdate\n                        \n                    \n                \n            \n            \n                \n                    \n                    userUpdate(id: number, userUpdate: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:155\n                \n            \n\n\n            \n                \n                    user updated by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    userUpdate\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing path for update\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ForbiddenException, HttpException, HttpStatus, Injectable, InternalServerErrorException, Param, UnauthorizedException } from \"@nestjs/common\";\nimport { JwtService } from \"@nestjs/jwt\";\nimport { UserDto } from \"./dto/user.dto\";\nimport { LoginDto } from \"./login.dto\";\nimport { UserRepository } from \"./user.repository\";\nimport * as bcrypt from 'bcryptjs';\nimport { JwtPayload } from \"./jwt/jwt-payload.interface\";\n/**\n * user service class here we will write business logic\n * @author Md Nasir Hussain\n */\n @Injectable()\n export class UserService {\n     /**\n          * * user service class is inject here user repository class\n          * @param userRepo \n          */\n     constructor(private userRepo: UserRepository,\n         private jwtService:JwtService) { }\n     /**\n      * user registering\n      * @param user \n      * @returns if success or failure\n      */\n     async userRegister(user: UserDto): Promise {\n         try {\n             const { password } = user;\n             const salt = await bcrypt.genSalt();\n             const hashedPassword = await bcrypt.hash(password, salt);\n             console.log(\"hashedPassword  \" + hashedPassword);\n             \n             let response = await this.userRepo.save({ ...user, password: hashedPassword })\n             // user.password=hashedPassword;\n             //let response =await this.userRepo.save(user)\n            // let response = await this.userRepo.save(user)\n             console.log(\"Response Password\" + response);\n             if (response) {\n                 const message: string = \"User  registered successfully\";\n                 return message;\n             }\n             else {\n                 const message: string = \"User not registered successfully,Please try again later\";\n                 throw new InternalServerErrorException(message);\n             }\n         }\n         catch (error) {\n             if (error.errno === 1062) {\n                 const message: string = \"User already registered\";\n                 throw new InternalServerErrorException(message);\n             }\n         }\n     }\n \n     /**\n      * validate the user \n      * @param email user validated by email colume\n      * @param pass  user password validated\n      * @returns  if success or failure\n      */\n      async userLogin(userLogin: LoginDto):Promise {\n         try {\n             const userInfo = await this.userRepo.findOneOrFail({emailId: userLogin.emailId})\n             if (userInfo && await bcrypt.compare(userLogin.password, userInfo.password)) {\n \n                 const payload: JwtPayload = { emailId: userInfo.emailId };\n                 let token = this.jwtService.sign(payload);\n                console.log(token);\n                 //return {token,status:'Login successfully'};\n                 return {token}\n             }\n             else {\n                 //const message: string = \"Invalid Credential\";\n                 //throw new ForbiddenException(message)\n                 throw new UnauthorizedException('Invalid Credential');\n             }\n         }\n         catch (error) {\n             if (error?.status === 401) {\n                 // throw new ForbiddenException(error.message);\n                 throw new UnauthorizedException('Invalid Credential');\n \n             }\n \n             throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR)\n         }\n     }\n     /**\n      * findUserList here\n      * @param user information\n      * @returns if success or failure\n      */\n     async findUserList(user: UserDto): Promise {\n         try {\n             let response = await this.userRepo.find()\n             if (response) {\n                 return response;\n             }\n             else {\n                 const message: string = \"User not found\";\n                 throw new InternalServerErrorException(message);\n             }\n         }\n         catch (error) {\n             throw new InternalServerErrorException(error.message);\n         }\n     }\n     /**\n      * user finding by id\n      * @param id \n      * @returns if success or failure\n      */\n     async userFindById(id: number) {\n         try {\n             let response = await this.userRepo.findOne(id);\n             if (response) {\n                 return response;\n             }\n             else {\n                 const message: string = \"User not found by this id\";\n                 throw new InternalServerErrorException(message);\n             }\n         }\n         catch (error) {\n             throw new InternalServerErrorException(error.message);\n         }\n     }\n     /**\n      * find by user name\n      * @param name passing name \n      * @returns if success or failure\n      */\n     async findUserByName(name: string): Promise {\n         try {\n             let response = await this.userRepo.find({ name: name });\n             console.log(\"response\" + response);\n             if (response) {\n                 console.log(response);\n                 return response;\n             }\n             else {\n                 const message: string = \"User not found by this name\";\n                 throw new InternalServerErrorException(message);\n             }\n         }\n         catch (error) {\n             throw new InternalServerErrorException(error.message)\n         }\n     }\n   \n     /**\n      * user updated by id\n      * @param userUpdate passing path for update\n      * @returns if success or failure\n      */\n     async userUpdate( id: number,  userUpdate: UserDto) {\n         {\n             try {\n                 let response = await this.userRepo.update(id, userUpdate);\n                 if (response) {\n                     const message: string = \"User updated successfully\";\n                     return message;\n                 }\n                 else {\n                     const message: string = \"User not updated successfully\";\n                     throw new InternalServerErrorException(message);\n                 }\n             }\n             catch (error) {\n                 throw new HttpException(error.messsage, HttpStatus.INTERNAL_SERVER_ERROR);\n             }\n         }\n     }\n     \n     /**\n      * userDeleteById\n      * @param id  passing path here\n      * @returns if success or failure\n      */\n     async userDeleteById(id: UserDto) {\n         try {\n             let response = await this.userRepo.delete(id)\n             if (response.affected > 0) {\n                 const message: string = \"User deleted successfully with id:\" + id;\n                 return message;\n             }\n             else {\n                 const message: string = \"User not deleted successfully\";\n                 throw new ForbiddenException(message);\n             }\n         }\n         catch (error) {\n             throw new InternalServerErrorException(error.message);\n \n         }\n     }\n }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationPipeOptions.html":{"url":"interfaces/ValidationPipeOptions.html","title":"interface - ValidationPipeOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidationPipeOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/validationPipe/validationPipeOptions.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                ValidationPipeOptions interface\n\n            \n\n            \n                Extends\n            \n            \n                    ValidatorOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            disableErrorMessages\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            exceptionFactory\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            transform\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        disableErrorMessages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableErrorMessages:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    disableErrorMessages here\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exceptionFactory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exceptionFactory:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    ValidationError here\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        transform\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        transform:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    enable/disable validation\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ValidationError, ValidatorOptions } from \"class-validator\";\n/**\n * ValidationPipeOptions interface\n * @author Md Nasir Hussain\n */\n export interface ValidationPipeOptions extends ValidatorOptions {\n    /**\n     * enable/disable validation\n     */\n      transform?: boolean;\n      /**\n       * disableErrorMessages here\n       */\n      disableErrorMessages?: boolean;\n      /**\n       * ValidationError here \n       */\n      exceptionFactory?: (errors: ValidationError[]) => any;\n    }\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/address/address.controller.ts\n            \n            controller\n            AddressController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/address/address.entity.ts\n            \n            entity\n            Address\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/address/address.repository.ts\n            \n            class\n            AddressRepository\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/address/address.service.ts\n            \n            injectable\n            AddressService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/address/dto/address.dto.ts\n            \n            class\n            AddressDto\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/custom-exception/custom-exception.exception.ts\n            \n            class\n            CustomException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exception-filter/exception-filter.filter.ts\n            \n            class\n            ExceptionExceptionFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/transform-interceptor/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/transform-interceptor/transform.interceptor.ts\n            \n            interface\n            Response\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/validationPipe/validationPipeOptions.interface.ts\n            \n            interface\n            ValidationPipeOptions\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/course/course.controller.ts\n            \n            controller\n            CourseController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/course/course.entity.ts\n            \n            entity\n            Course\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/course/course.repository.ts\n            \n            class\n            CourseRepository\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/course/course.service.ts\n            \n            injectable\n            CourseService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/course/dto/course.dto.ts\n            \n            class\n            CourseDto\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/dto/user.dto.ts\n            \n            class\n            UserDto\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/user/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/user/jwt/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/user/jwt/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/user/login.dto.ts\n            \n            class\n            LoginDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/user/role/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/role/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/user.repository.ts\n            \n            class\n            UserRepository\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (9/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.18\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/passport : ^8.1.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/schedule : ^1.0.2\n        \n            @nestjs/swagger : ^5.2.0\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            bcryptjs : ^2.4.3\n        \n            cache-manager : ^3.6.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            fastify-swagger : ^4.14.0\n        \n            mysql2 : ^2.3.3\n        \n            passport : ^0.5.2\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.3.0\n        \n            typeorm : ^0.2.41\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Role   (src/.../role.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/user/rolse/role.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                    \n                        \n                            user rolse define here\n\n                        \n                    \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    main class\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AddressModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CourseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AddressModule\n\n\n\ncluster_AddressModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_CourseModule\n\n\n\ncluster_CourseModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAddressService\n\nAddressService\n\n\n\nAddressModule\n\nAddressModule\n\nAddressModule -->\n\nAddressService->AddressModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAddressModule->AppModule\n\n\n\n\n\nCourseModule\n\nCourseModule\n\nAppModule -->\n\nCourseModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nUserModule->JwtStrategy \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nCourseService\n\nCourseService\n\nCourseModule -->\n\nCourseService->CourseModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nUserModule -->\n\nJwtStrategy->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/user/role/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n            \n                \n                    setmatadata\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n            \n                \n                    user role check\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
